<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jared Forsyth</title>
    <link>http://jaredly.github.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 31 Dec 2015 17:21:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>What Holds Me Back From Clojurescript</title>
      <link>http://jaredly.github.io/2015/11/26/What-holds-me-back-from-Clojurescript/</link>
      <guid>http://jaredly.github.io/2015/11/26/What-holds-me-back-from-Clojurescript/</guid>
      <pubDate>Thu, 26 Nov 2015 17:46:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;I’ve expressed &lt;a href=&quot;https://twitter.com/jaredforsyth/status/507253337310236672&quot;&gt;multiple&lt;/a&gt; &lt;a href=&quot;https://twitter.com/jaredforsyth/status/668947788021960704&quot;&gt;times&lt;/a&gt; that I really want to get into clojurescript, but I keep running into barriers.&lt;/p&gt;
&lt;p&gt;My background: I’m an experienced JS dev, and for my personal projects I use the latest &amp;amp; greatest of &lt;a href=&quot;https://facebook.github.com/react&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://flowtype.org&quot;&gt;Flow&lt;/a&gt;, &lt;a href=&quot;https://babeljs.io&quot;&gt;Babel&lt;/a&gt;, and &lt;a href=&quot;https://webpack.github.io&quot;&gt;Webpack&lt;/a&gt;, which makes for a pretty rocking experience. Given my background, lots of my hesitation could just be the fact that staying in my comfort zone of javascript is &lt;em&gt;easy&lt;/em&gt;, though it may be far less &lt;em&gt;simple&lt;/em&gt; than the experience provided by clojurescript.&lt;/p&gt;
&lt;p&gt;By the end of this post, I hope I will have convinced myself to face my fears and dive into clojurescript anyway :D&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;I’ve expressed &lt;a href=&quot;https://twitter.com/jaredforsyth/status/507253337310236672&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;multiple&lt;/a&gt; &lt;a href=&quot;https://twitter.com/jaredforsyth/status/668947788021960704&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;times&lt;/a&gt; that I really want to get into clojurescript, but I keep running into barriers.&lt;/p&gt;
&lt;p&gt;My background: I’m an experienced JS dev, and for my personal projects I use the latest &amp;amp; greatest of &lt;a href=&quot;https://facebook.github.com/react&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://flowtype.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flow&lt;/a&gt;, &lt;a href=&quot;https://babeljs.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel&lt;/a&gt;, and &lt;a href=&quot;https://webpack.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack&lt;/a&gt;, which makes for a pretty rocking experience. Given my background, lots of my hesitation could just be the fact that staying in my comfort zone of javascript is &lt;em&gt;easy&lt;/em&gt;, though it may be far less &lt;em&gt;simple&lt;/em&gt; than the experience provided by clojurescript.&lt;/p&gt;
&lt;p&gt;By the end of this post, I hope I will have convinced myself to face my fears and dive into clojurescript anyway :D&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;What draws me to clojurescript?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the community&lt;/li&gt;
&lt;li&gt;immutable all the data&lt;/li&gt;
&lt;li&gt;functional to the core&lt;/li&gt;
&lt;li&gt;om/next&lt;/li&gt;
&lt;li&gt;protocols&lt;/li&gt;
&lt;li&gt;macros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But what holds me back?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;startup time is a bear&lt;/li&gt;
&lt;li&gt;user-hostile error messages&lt;/li&gt;
&lt;li&gt;immature tooling&lt;/li&gt;
&lt;li&gt;no good story for type checking&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;What-draws-me-to-clojurescript&quot;&gt;&lt;a href=&quot;#What-draws-me-to-clojurescript&quot; class=&quot;headerlink&quot; title=&quot;What draws me to clojurescript?&quot;&gt;&lt;/a&gt;What draws me to clojurescript?&lt;/h3&gt;&lt;h4 id=&quot;The-community&quot;&gt;&lt;a href=&quot;#The-community&quot; class=&quot;headerlink&quot; title=&quot;The community&quot;&gt;&lt;/a&gt;The community&lt;/h4&gt;&lt;p&gt;This is really what keeps drawing me back to clojure(script): realy awesome talks from clojure conj &amp;amp; other clojurey conferences, both about difficult real-world problems and interesting/fun/playful problems. And I keep thinking “I want to be a part of that.” Also, Rich Hickey’s talks are fantastic.&lt;/p&gt;
&lt;p&gt;From what I’ve seen, the community is still small enough to be pretty cohesive, and there are lots of helpful people on irc and &lt;a href=&quot;https://clojurians.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;slack&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&quot;vs-Javascript&quot;&gt;&lt;a href=&quot;#vs-Javascript&quot; class=&quot;headerlink&quot; title=&quot;vs Javascript&quot;&gt;&lt;/a&gt;vs Javascript&lt;/h5&gt;&lt;p&gt;Javascript has a larger and necessarily much less cohesive community. This can be nice in that almost every error you encounter will have a Stack Overflow question + answer. That said, there are &lt;em&gt;so&lt;/em&gt; many stackoverflow results about javascript (from so many different eras of js dev) that it can be really difficult to determine what is current best practice.&lt;/p&gt;
&lt;h4 id=&quot;Immutable-all-the-data&quot;&gt;&lt;a href=&quot;#Immutable-all-the-data&quot; class=&quot;headerlink&quot; title=&quot;Immutable all the data&quot;&gt;&lt;/a&gt;Immutable all the data&lt;/h4&gt;&lt;p&gt;Having data be immutable frees up a lot of my complexity budget and enables great functional paradigms across the board.&lt;/p&gt;
&lt;h5 id=&quot;vs-Javascript-1&quot;&gt;&lt;a href=&quot;#vs-Javascript-1&quot; class=&quot;headerlink&quot; title=&quot;vs Javascript&quot;&gt;&lt;/a&gt;vs Javascript&lt;/h5&gt;&lt;p&gt;In javascript, everything is mutable, but w/ new es7 spread/rest syntax it is increasingly easy to just do immutable anyway. E.g. instead of &lt;code&gt;myobj.x = newx&lt;/code&gt; you can do &lt;code&gt;myobj = {...myobj, x: newx}&lt;/code&gt; and everything is immutable &amp;amp; persistant!&lt;/p&gt;
&lt;p&gt;And for more data-heavy situations where that breaks down, I can always switch to &lt;code&gt;mori&lt;/code&gt; or &lt;code&gt;immutable.js&lt;/code&gt;, albeit with significant disadvantages from syntax &amp;amp; interop.&lt;/p&gt;
&lt;p&gt;The fact remains however that javascript, at it’s core, is designed around mutability, and clojurescript is designed around immutability. This has many design, mindset, and culture implications that are not to be underestimated.&lt;/p&gt;
&lt;h4 id=&quot;Functional-to-the-core&quot;&gt;&lt;a href=&quot;#Functional-to-the-core&quot; class=&quot;headerlink&quot; title=&quot;Functional to the core&quot;&gt;&lt;/a&gt;Functional to the core&lt;/h4&gt;&lt;p&gt;Clojurescript, as a lisp, gets a number of advantages automatically when it comes to handling data cleanly and concisely. Things like the threading macro, conj, partial application and more end up defining the feel of the language as well as idioms and best practices. From the brief stints that I’ve spent in clojure-land, I’ve come to really appreciate them &amp;amp; miss them when I’m in javascript or another imperative languages.&lt;/p&gt;
&lt;h5 id=&quot;vs-Javascript-2&quot;&gt;&lt;a href=&quot;#vs-Javascript-2&quot; class=&quot;headerlink&quot; title=&quot;vs Javascript&quot;&gt;&lt;/a&gt;vs Javascript&lt;/h5&gt;&lt;p&gt;Something like &lt;a href=&quot;https://github.com/jussi-kalliokoski/trine&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;trine&lt;/a&gt; might do quite nicely, along with some as-yet very experimental language features (that can nonetheless be used with abandon via babel).&lt;/p&gt;
&lt;p&gt;On the other hand, all those little helpers land you with a long list of things to memorize, with their own little tricks and gotchas (I recently spent way too long bugfighting before realizing that &lt;code&gt;map&lt;/code&gt;‘s return value is a &lt;em&gt;lazy&lt;/em&gt; sequence). But is it complex, or simply unfamiliar? I put together a bunch of &lt;a href=&quot;https://quizlet.com/Jared_Forsyth/folders/clojure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;quizlet flashcards&lt;/a&gt; to try and overcome this barrier.&lt;/p&gt;
&lt;h4 id=&quot;Om-next&quot;&gt;&lt;a href=&quot;#Om-next&quot; class=&quot;headerlink&quot; title=&quot;Om/next&quot;&gt;&lt;/a&gt;Om/next&lt;/h4&gt;&lt;p&gt;Om was pretty neat when it came out, but it looks like om/next has set out to solve all our problems forever :D, at least relating to client-side state management. David Nolen is a really clever guy, and I really want what om/next promises. We’ll see how that pans out.&lt;/p&gt;
&lt;h5 id=&quot;vs-Javascript-3&quot;&gt;&lt;a href=&quot;#vs-Javascript-3&quot; class=&quot;headerlink&quot; title=&quot;vs Javascript&quot;&gt;&lt;/a&gt;vs Javascript&lt;/h5&gt;&lt;p&gt;Relay and Falcor are really interesting, but are focused on the “server communication” part of the puzzle, leaving the rest of the client-side state up to you. Redux maybe comes closest to om/next, although it just provides a small subset of the functionality. Another possibility is to (just) port om/next &lt;a href=&quot;https://twitter.com/swannodette/status/672090146339188736&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;to javascript&lt;/a&gt;, maybe as a layer on top of redux…&lt;/p&gt;
&lt;h4 id=&quot;Protocols&quot;&gt;&lt;a href=&quot;#Protocols&quot; class=&quot;headerlink&quot; title=&quot;Protocols&quot;&gt;&lt;/a&gt;Protocols&lt;/h4&gt;&lt;p&gt;I’m really intrigued by this approach to polymorphism, but I’ll have to use it more to see how it compares. It feels a lot like &lt;code&gt;swift&lt;/code&gt;‘s protocols or &lt;code&gt;go&lt;/code&gt;‘s interfaces or &lt;code&gt;rust&lt;/code&gt;‘s traits, which I find really useful.&lt;/p&gt;
&lt;h5 id=&quot;vs-Javascript-4&quot;&gt;&lt;a href=&quot;#vs-Javascript-4&quot; class=&quot;headerlink&quot; title=&quot;vs Javascript&quot;&gt;&lt;/a&gt;vs Javascript&lt;/h5&gt;&lt;p&gt;These aren’t really things you can bolt on post-hoc – you really need language-level support for them. I can’t imagine javascript having an equivalent, unless via some babel transform that did whole-program analysis + type inference…&lt;/p&gt;
&lt;h4 id=&quot;Macros-also-look-cool…&quot;&gt;&lt;a href=&quot;#Macros-also-look-cool…&quot; class=&quot;headerlink&quot; title=&quot;Macros also look cool…&quot;&gt;&lt;/a&gt;Macros also look cool…&lt;/h4&gt;&lt;p&gt;But I haven’t used them enough to give a real review. In rust I mostly use macros to get around limitations (mine or the compiler’s) surrounding types &amp;amp; lifetimes.&lt;/p&gt;
&lt;h5 id=&quot;vs-Javascript-5&quot;&gt;&lt;a href=&quot;#vs-Javascript-5&quot; class=&quot;headerlink&quot; title=&quot;vs Javascript&quot;&gt;&lt;/a&gt;vs Javascript&lt;/h5&gt;&lt;p&gt;&lt;a href=&quot;http://sweetjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SweetJS&lt;/a&gt; looks really awesome, and there are plans to &lt;a href=&quot;https://github.com/mozilla/sweet.js/pull/485&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;integrate well with babel&lt;/a&gt;, but clojurescript still wins from a community + mindset perspective.&lt;/p&gt;
&lt;h3 id=&quot;But-what-holds-me-back&quot;&gt;&lt;a href=&quot;#But-what-holds-me-back&quot; class=&quot;headerlink&quot; title=&quot;But what holds me back?&quot;&gt;&lt;/a&gt;But what holds me back?&lt;/h3&gt;&lt;h4 id=&quot;Clojure-Startup-time&quot;&gt;&lt;a href=&quot;#Clojure-Startup-time&quot; class=&quot;headerlink&quot; title=&quot;Clojure Startup time&quot;&gt;&lt;/a&gt;Clojure Startup time&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/borkdude/status/669422012759150592&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Twitter tells me&lt;/a&gt; that this doesn’t end up being a huge problem, but it’s always a huge drag when I try to get started.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ time lein help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lein help  1.62s user 0.24s system 104% cpu 1.785 total&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ time boot help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boot help  11.56s user 0.70s system 278% cpu 4.395 total&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ time lein repl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; (ctrl-c as soon as prompt appears)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lein repl  5.65s user 0.44s system 78% cpu 7.801 total&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Someone made an npm package with the bootstrapped clojurescript repl, which helps a lot:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$time cljs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; (ctrl-c as soon as prompt appears)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cljs  0.95s user 0.13s system 79% cpu 1.361 total&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.ndk.io/2014/02/25/clojure-bootstrapping.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Here’s an in-depth look&lt;/a&gt; at clojure startup time. There’s a &lt;a href=&quot;https://github.com/technomancy/leiningen/wiki/Faster&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;long leinigen wiki page&lt;/a&gt; about ways to speed things up, which I haven’t tried yet, and &lt;a href=&quot;https://github.com/flatland/drip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;drip&lt;/a&gt; also looks promising.&lt;/p&gt;
&lt;h4 id=&quot;vs-Javascript-6&quot;&gt;&lt;a href=&quot;#vs-Javascript-6&quot; class=&quot;headerlink&quot; title=&quot;vs Javascript&quot;&gt;&lt;/a&gt;vs Javascript&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ time npm help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm help  0.34s user 0.10s system 79% cpu 0.548 total&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ time node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; (ctrl-c as soon as prompt appears)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node  0.10s user 0.01s system 20% cpu 0.543 total&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Again, some on twitter say “it’s not really a problem” :/ We’ll have to see how it pans out.&lt;/p&gt;
&lt;h4 id=&quot;User-hostile-error-messages&quot;&gt;&lt;a href=&quot;#User-hostile-error-messages&quot; class=&quot;headerlink&quot; title=&quot;User-hostile error messages&quot;&gt;&lt;/a&gt;User-hostile error messages&lt;/h4&gt;&lt;p&gt;In the little time I’ve spent with clojure(script), I’ve seen plenty of multiple-screen-long java tracebacks, which are completely bewildering. Certainly, if I had a background in java they wouldn’t be nearly as foreign, but I don’t think anyone would argue that they are ‘simple’. I don’t know what kind of effort is going into “nicer error messages” (elm is a &lt;a href=&quot;http://elm-lang.org/blog/compilers-as-assistants&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;great example&lt;/a&gt; of this), but if I ever dig into the clojure core system that’s the first thing I’d look into.&lt;/p&gt;
&lt;h4 id=&quot;Immature-tooling&quot;&gt;&lt;a href=&quot;#Immature-tooling&quot; class=&quot;headerlink&quot; title=&quot;Immature tooling&quot;&gt;&lt;/a&gt;Immature tooling&lt;/h4&gt;&lt;p&gt;Being compile-to-js in a js world means there’s always going to be a bit of feature lag, but there are a lot of things I miss when trying to use clojurescript.&lt;/p&gt;
&lt;h5 id=&quot;REPL&quot;&gt;&lt;a href=&quot;#REPL&quot; class=&quot;headerlink&quot; title=&quot;REPL&quot;&gt;&lt;/a&gt;REPL&lt;/h5&gt;&lt;p&gt;People talking about clojure(script) frequently shout from the rooftops about how awesome it is to have a repl, and I’m sure it’s night &amp;amp; day when coming from java, c++, etc. But chrome devtools is way ahead of your cli repl (and even your editor-integrated repl) in a bunch of important ways, and you can’t use clojurescript in the devtools console.&lt;/p&gt;
&lt;p&gt;The same is true for babel/es7+, but the problem is much less because es7+ is just a (fairly) light sprinkle on top of js, and data structures are all the same, etc.&lt;br&gt;To call a clojurescript function from the console… I’m not even sure how to get a reference to a function when you’re at a breakpoint (because names are so mangled).&lt;/p&gt;
&lt;p&gt;Someone made &lt;a href=&quot;https://chrome.google.com/webstore/detail/clojurescript-repl/lmjjlapjpjeodaadkljnmdfbjpfddchm?hl=en&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a chrome extension&lt;/a&gt; to give you a tab that is a clojurescript repl, but it uses an external server for compilation and doesn’t integrate into your project. If it integrated with figwheel (or could talk to an arbitrary nRepl) that would be a good start.&lt;/p&gt;
&lt;h5 id=&quot;Debugging&quot;&gt;&lt;a href=&quot;#Debugging&quot; class=&quot;headerlink&quot; title=&quot;Debugging&quot;&gt;&lt;/a&gt;Debugging&lt;/h5&gt;&lt;p&gt;It’s a great start that clojurescript has full sourcemap support, so you can generally see where you are in what file when you hit a breakpoint or throw an error, but there’s still a lot to be desired. It’s rather difficult (for me) to tell how to step through a clojurescript program – when to step in &amp;amp; out in order to get where I want.&lt;/p&gt;
&lt;p&gt;Also, in javascript, there’s mostly just one and rarely more than three break-able expressions on a given line (such that hitting “next” would leave you on the same line). In clojurescript there is rarely just one break-able expression on a line, and more often several. Every time I try to navigate this it is frustrating.&lt;/p&gt;
&lt;p&gt;The other big debugging issue is with value display &amp;amp; repl integration. When I’m at a breakpoint, it’s really difficult to introspect values and actually understand what a given map contains, for example. Someone has &lt;a href=&quot;https://github.com/binaryage/cljs-devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a library that fixes this&lt;/a&gt; but it requires a chrome feature that’s behind a flag in canary :/. I also want to be able to interact with the values at the console (see REPL section).&lt;/p&gt;
&lt;h4 id=&quot;No-good-story-for-type-checking&quot;&gt;&lt;a href=&quot;#No-good-story-for-type-checking&quot; class=&quot;headerlink&quot; title=&quot;No good story for type checking&quot;&gt;&lt;/a&gt;No good story for type checking&lt;/h4&gt;&lt;p&gt;Core.typed generated a lot of excitement when it first showed up a few years ago, although circleci has since decided it &lt;a href=&quot;http://blog.circleci.com/why-were-no-longer-using-core-typed/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wasn’t worth it&lt;/a&gt;. It’s based on racket’s optional type checker, which I highly respect, so I was hoping to try it out on an example clojurescript project, but unfortunately compatability hasn’t been maintained and it’s broken for the latest version of clojurescript. But &lt;a href=&quot;https://twitter.com/jaredforsyth/status/669917598016868352&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hopefully&lt;/a&gt; this will be fixed at some point.&lt;/p&gt;
&lt;p&gt;The Google closure compiler (which cljs already uses extensively) has support for type checking, including inference and even generics, and there are some experiments around leveraging that in clojurescript. It remains to be seen whether it will prove a good experience. I’m a bit skeptical that it will be able to give really good error messages &amp;amp; hints when you have type errors though. It also doesn’t support typing maps, which make up a large part of clojure data.&lt;/p&gt;
&lt;h5 id=&quot;vs-Javascript-7&quot;&gt;&lt;a href=&quot;#vs-Javascript-7&quot; class=&quot;headerlink&quot; title=&quot;vs Javascript&quot;&gt;&lt;/a&gt;vs Javascript&lt;/h5&gt;&lt;p&gt;I had the chance to use &lt;a href=&quot;https://flowtype.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flow&lt;/a&gt; on a large-scale project (the &lt;a href=&quot;https://github.com/facebook/react-devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React devtools&lt;/a&gt; rewrite) and I loved it! It can be added incrementally to a codebase, has great support for lots of javascript idioms, realy great inference, and a solid user experience (long-running server to fix wait times).&lt;/p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;Clojurescript really has a lot of things going for it, and a lot of the issues I have are actively being worked on. I’m going to try using clojurescript + om/next for a fairly large personal project pretty soon and we’ll see if I get hooked :)&lt;/p&gt;
</content:encoded>
      
      <comments>http://jaredly.github.io/2015/11/26/What-holds-me-back-from-Clojurescript/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Visualizing Reactive Streams: Hot and Cold Observables</title>
      <link>http://jaredly.github.io/2015/03/06/visualizing-reactive-streams-hot-and-cold/</link>
      <guid>http://jaredly.github.io/2015/03/06/visualizing-reactive-streams-hot-and-cold/</guid>
      <pubDate>Fri, 06 Mar 2015 23:21:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Reactive Programming is getting a lot of attention these days, and it promises to reduce frustration, bugs, and greenhouse gas emissions. Unfortunately, there’s a sizeable learning curve involved while you try and get your head to think in streams instead of imperative sequential processes.&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;Reactive Programming is getting a lot of attention these days, and it promises to reduce frustration, bugs, and greenhouse gas emissions. Unfortunately, there’s a sizeable learning curve involved while you try and get your head to think in streams instead of imperative sequential processes.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to greatly ease the mental burden involved, I’ve created a tool that allows you to &lt;strong&gt;visualize the streams&lt;/strong&gt; in real time, removing the guesswork. It’s called &lt;a href=&quot;https://jaredly.github.io/rxvision&quot;&gt;RxVision&lt;/a&gt; and you should check it out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of the things that caught me by suprise is the difference between &lt;code&gt;hot&lt;/code&gt; and &lt;code&gt;cold&lt;/code&gt; observables, and how they interact with multiple observers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this article, I will:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Learning_Rx_and_Duplicate_Ajax_Calls&quot;&gt;give some background &amp;amp; describe the cold-induced bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Stone_cold&quot;&gt;give &amp;amp; explain a trivial example demonstrating this bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Cold_Multiplication&quot;&gt;explain the bug in the larger example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Cleaning_up_with_a_little_heat&quot;&gt;show how to fix the bug in the larger example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All with lots of visuals. Enjoy!&lt;/p&gt;
&lt;h2 id=&quot;Learning-Rx-and-Duplicate-Ajax-Calls&quot;&gt;&lt;a href=&quot;#Learning-Rx-and-Duplicate-Ajax-Calls&quot; class=&quot;headerlink&quot; title=&quot;Learning Rx and Duplicate Ajax Calls&quot;&gt;&lt;/a&gt;Learning Rx and Duplicate Ajax Calls&lt;/h2&gt;&lt;p&gt;My first real experience playing with reactive streams was by means of &lt;a href=&quot;https://github.com/staltz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@staltz&lt;/a&gt;‘s excellent &lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tutorial&lt;/a&gt;, in which you build a simple “Who to follow” box, similar to the one on twitter. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-17.png&quot; alt=&quot;The who to follow box&quot;&gt;&lt;/p&gt;
&lt;p&gt;Just to make sure I really understood what was going on, I &lt;a href=&quot;https://gist.github.com/jaredly/fee1bd6346ea95144d27&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rewrote the demo in clojurescript&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Essentially, what the box does is get the &lt;code&gt;users.json&lt;/code&gt; list from github (at a random offset), and randomly pick 3 of the 100 in that list to display to you. Clicking &lt;code&gt;x&lt;/code&gt; next to one of the users replaces that line with a new user (drawn from the 100). Clicking &lt;code&gt;refresh&lt;/code&gt; triggers a request to the &lt;code&gt;users.json&lt;/code&gt; api endpoint again, this time with a different offset.&lt;/p&gt;
&lt;p&gt;While debugging my clojurescript version, I saw in devtools that when refresh was clicked, there were &lt;strong&gt;3 ajax requests instead of one&lt;/strong&gt;. Confused, I searched through the article, and eventually found in the comments section my answer: the issue was &lt;code&gt;hot&lt;/code&gt; vs &lt;code&gt;cold&lt;/code&gt; observables.&lt;/p&gt;
&lt;h2 id=&quot;Stone-cold&quot;&gt;&lt;a href=&quot;#Stone-cold&quot; class=&quot;headerlink&quot; title=&quot;Stone cold&quot;&gt;&lt;/a&gt;Stone cold&lt;/h2&gt;&lt;p&gt;Cold observables essentially replicate themselves for each new observer - and this works &lt;strong&gt;retroactively&lt;/strong&gt; up the chain of observables.&lt;/p&gt;
&lt;p&gt;For a somewhat trivial example:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; btn = $(&lt;span class=&quot;string&quot;&gt;&#39;button&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; clicks = Rx.Observable.fromEvent(btn, &lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clicks.subscribe(value =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;clicked!&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; values = clicks.map(() =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; less1 = values.map(value =&amp;gt; value - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; times2 = less1.map(value =&amp;gt; value*&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;times2.subscribe(value =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;i got a value&#39;&lt;/span&gt;, value))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;times2.subscribe(value =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;also subscribing&#39;&lt;/span&gt;, value))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;values.subscribe(value =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;the original was&#39;&lt;/span&gt;, value))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;you can follow along in the &lt;a href=&quot;http://jaredly.github.io/rxvision/examples/playground/&quot;&gt;RxVision playground&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You would expect that the two &lt;code&gt;times2&lt;/code&gt; subscriptions would return the same number, right? &lt;em&gt;they don’t&lt;/em&gt;. Take a look at the flow of values here:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-14.png&quot; alt=&quot;one flow for each subscriber&quot;&gt;&lt;/p&gt;
&lt;p&gt;The “click” event is duplicated &lt;em&gt;four times&lt;/em&gt;, once for each subscriber. The first &lt;code&gt;map&lt;/code&gt;, which generates a random number, therefore generates &lt;strong&gt;3 different numbers&lt;/strong&gt;, one for each subscriber down the chain. &lt;/p&gt;
&lt;p&gt;To fix that obvious bug, we have to make the random mapper &lt;code&gt;hot&lt;/code&gt;, by adding &lt;code&gt;.share()&lt;/code&gt; at the end. Line 5 now looks like:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; values = clicks.map(() =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random() * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)).share()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This makes our &lt;code&gt;console.log&lt;/code&gt;s give the right values, but the flow diagram still shows some duplication:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-15.png&quot; alt=&quot;still some duplication.&quot;&gt;&lt;/p&gt;
&lt;p&gt;To fully deduplicate, we need to add &lt;code&gt;.share()&lt;/code&gt; to every observable that is observed more than once (in this case, line 2 and line 7).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-18.png&quot; alt=&quot;doesn&amp;#39;t that look so much cleaner?&quot;&gt;&lt;/p&gt;
&lt;p&gt;So how does this play out in a somewhat less trivial example?&lt;/p&gt;
&lt;h2 id=&quot;Cold-Multiplication&quot;&gt;&lt;a href=&quot;#Cold-Multiplication&quot; class=&quot;headerlink&quot; title=&quot;Cold Multiplication&quot;&gt;&lt;/a&gt;Cold Multiplication&lt;/h2&gt;&lt;p&gt;To demonstrate the issue, I ran the original demo code under the following user actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;load the page&lt;/li&gt;
&lt;li&gt;click &lt;code&gt;x&lt;/code&gt; next to the first two people&lt;/li&gt;
&lt;li&gt;click &lt;code&gt;refresh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;click &lt;code&gt;x&lt;/code&gt; next to the third person&lt;/li&gt;
&lt;li&gt;click &lt;code&gt;refresh again&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a screenshot of &lt;a href=&quot;https://jaredly.github.io/rxvision&quot;&gt;RxVision&lt;/a&gt; which visualizes the flow of values between streams.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here, too you can follow along on &lt;a href=&quot;http://jaredly.github.io/rxvision/examples/gh-follow/&quot;&gt;the demo page I made&lt;/a&gt;. The code there represents the fully deduplicated version.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-7.png&quot; alt=&quot;Original code - lots of duplicate events&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each light gray block represents an “async group” – e.g., all of the events happened within a single tick of the js event loop.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are lots of things going on here, so let’s dissect it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;those blue &lt;code&gt;create&lt;/code&gt; streams each represent an individual Ajax request. Within the first tick, 3 requests get fired off. You can see the &lt;code&gt;startWith&lt;/code&gt; observable that initiates this pushes out the same value 3 times – this is definitely a &lt;code&gt;hot&lt;/code&gt; vs &lt;code&gt;cold&lt;/code&gt; problem.&lt;/li&gt;
&lt;li&gt;the refresh button click (the very top stream) fires off &lt;strong&gt;6 times&lt;/strong&gt; when it is clicked once. Three of those times are to clear each UI list item, and then 3 other times for our duplicated ajax calls.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Cleaning-up-with-a-little-heat&quot;&gt;&lt;a href=&quot;#Cleaning-up-with-a-little-heat&quot; class=&quot;headerlink&quot; title=&quot;Cleaning up with a little heat&quot;&gt;&lt;/a&gt;Cleaning up with a little heat&lt;/h2&gt;&lt;p&gt;As with the first example, the way to fix duplication is the &lt;code&gt;.share()&lt;/code&gt; method of an observable. To stop the duplicate requesting, we just &lt;code&gt;.share()&lt;/code&gt; the &lt;code&gt;responseStream&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; responseStream = requestStream.flatMap(ajaxGet).share();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That was easy. Now it looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pasted-6.png&quot; alt=&quot;Ajax deduped, but click handler still going crazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;Note that there are now only 3 ajax requests (the &lt;code&gt;create&lt;/code&gt; streams), one for the initial and two more for the times we clicked &lt;code&gt;refresh&lt;/code&gt;. However, the refresh button click handler is still duplicating, so we need to &lt;code&gt;share()&lt;/code&gt; that too:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; refreshClickStream = Rx.Observable.fromEvent(refreshButton, &lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;).share();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The data flow chart now looks much cleaner, and duplication has been eliminated.&lt;br&gt;&lt;img src=&quot;/images/pasted-16.png&quot; alt=&quot;Order has been restored&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-have-we-learned&quot;&gt;&lt;a href=&quot;#What-have-we-learned&quot; class=&quot;headerlink&quot; title=&quot;What have we learned?&quot;&gt;&lt;/a&gt;What have we learned?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;It’s easier to debug something you can look at.&lt;/li&gt;
&lt;li&gt;Whenever an observable is subscribed to more than once, make it hot with &lt;code&gt;.share()&lt;/code&gt; to make all subscribers see the same thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for your time, and if you check out &lt;a href=&quot;https://jaredly.github.io/rxvision&quot;&gt;RxVision&lt;/a&gt;, let me know what you think!&lt;/p&gt;
</content:encoded>
      
      <comments>http://jaredly.github.io/2015/03/06/visualizing-reactive-streams-hot-and-cold/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Rust compiling rust: adventures with librustc</title>
      <link>http://jaredly.github.io/2014/11/22/rust-compiling-rust-adventures-with-librustc/</link>
      <guid>http://jaredly.github.io/2014/11/22/rust-compiling-rust-adventures-with-librustc/</guid>
      <pubDate>Sun, 23 Nov 2014 01:17:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;For &lt;a href=&quot;http://jaredly.github.io/itreed/&quot;&gt;the web-based everything notebook&lt;/a&gt; that I’m working on, I’ve been writing backend hookups to various programming REPLs, including &lt;a href=&quot;http://ipython.org&quot;&gt;IPython&lt;/a&gt; and &lt;a href=&quot;http://gorilla-repl.org&quot;&gt;Gorilla&lt;/a&gt;. I wanted to be able to evaluate rust code as well in this notebook environment, and so I set about writing a simple server that would compile up a string in rust when asked. This proved do have a couple of gotchas, so I thought I’d air my thoughts here.&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;For &lt;a href=&quot;http://jaredly.github.io/itreed/&quot;&gt;the web-based everything notebook&lt;/a&gt; that I’m working on, I’ve been writing backend hookups to various programming REPLs, including &lt;a href=&quot;http://ipython.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IPython&lt;/a&gt; and &lt;a href=&quot;http://gorilla-repl.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gorilla&lt;/a&gt;. I wanted to be able to evaluate rust code as well in this notebook environment, and so I set about writing a simple server that would compile up a string in rust when asked. This proved do have a couple of gotchas, so I thought I’d air my thoughts here.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;For the impatient, &lt;a href=&quot;https://github.com/jaredly/itreed/blob/5d0b0fdc544a18aab0fdcf6990beea9c15dce8d4/lib/kernels/rust/compile_inline.rs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here’s the code&lt;/a&gt;. Just beware of the caveat at the bottom of this post.&lt;/p&gt;
&lt;h2 id=&quot;Using-librustc&quot;&gt;&lt;a href=&quot;#Using-librustc&quot; class=&quot;headerlink&quot; title=&quot;Using librustc&quot;&gt;&lt;/a&gt;Using &lt;code&gt;librustc&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;The current &lt;code&gt;librustc&lt;/code&gt; API doesn’t have a nice, simple “here’s the string, compile it please” method, so that’s what I wrote. Here’s the basic signature:&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compile_string&lt;/span&gt;&lt;/span&gt;(input: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, output: Path, sysroot: &lt;span class=&quot;built_in&quot;&gt;Option&lt;/span&gt;&amp;lt;Path&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// example usage:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; src = &lt;span class=&quot;string&quot;&gt;&quot;fn main() &amp;#123; println!(&quot;&lt;/span&gt;Hello!&lt;span class=&quot;string&quot;&gt;&quot;) &amp;#125;&quot;&lt;/span&gt;.to_string();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; output = Path::new(&lt;span class=&quot;string&quot;&gt;&quot;/tmp/hello&quot;&lt;/span&gt;.to_string());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sysroot = Path::new(&lt;span class=&quot;string&quot;&gt;&quot;/usr/local/&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compile_string(src, output, &lt;span class=&quot;literal&quot;&gt;Some&lt;/span&gt;(sysroot));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// now `/tmp/hello` is ready to go!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;sysroot&lt;/code&gt; from the above definition has to do with the location of the compiled rust libraries (given that there’s not a fool-proof way of automatically knowing where these would be). If the libraries are located in &lt;code&gt;/usr/local/lib/rustlib&lt;/code&gt;, then sysroot is &lt;code&gt;/usr/local/&lt;/code&gt;. Here are the headers we’ll need:&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;crate&lt;/span&gt; rustc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;crate&lt;/span&gt; rustc_trans;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;crate&lt;/span&gt; syntax;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; rustc_trans::driver::driver::&amp;#123;FileInput, StrInput, Input, compile_input&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; rustc_trans::session::config::&amp;#123;basic_options, build_configuration, OutputTypeExe&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; rustc_trans::session::&amp;#123;build_session, Session&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;use&lt;/span&gt; syntax::diagnostics;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;There are several crates involved here; &lt;code&gt;librustc&lt;/code&gt; is currently in the process of being refactored, so the locations of some of these items might change.&lt;/p&gt;
&lt;p&gt;The function that is exposed by &lt;code&gt;librustc&lt;/code&gt; is:&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile_input(sess: Session, cfg: CrateConfig,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              input: &amp;amp;Input, outdir: &amp;amp;&lt;span class=&quot;built_in&quot;&gt;Option&lt;/span&gt;&amp;lt;Path&amp;gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              output: &amp;amp;&lt;span class=&quot;built_in&quot;&gt;Option&lt;/span&gt;&amp;lt;Path&amp;gt;, addl_plugins: &lt;span class=&quot;built_in&quot;&gt;Option&lt;/span&gt;&amp;lt;Plugins&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This requires the creation of a basic session and accompanying config, in addition to the input and the output that we provide.&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* Build a basic session object to output a compiled binary. */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;basic_sess&lt;/span&gt;&lt;/span&gt;(sysroot: Path) -&amp;gt; Session &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mut&lt;/span&gt; opts = basic_options();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// the only modifications that need to be made to the session options are&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// output_types (otherwise no binary is created),&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// and maybe_sysroot (otherwise the rust libs cannot be found)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    opts.output_types = &lt;span class=&quot;built_in&quot;&gt;vec!&lt;/span&gt;[OutputTypeExe];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    opts.maybe_sysroot = &lt;span class=&quot;literal&quot;&gt;Some&lt;/span&gt;(sysroot);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// copied from librustc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; descriptions = diagnostics::registry::Registry::new(&amp;amp;rustc::DIAGNOSTICS);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sess = build_session(opts, &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, descriptions);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sess&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And now the final pieces; a few helper functions to expose a simple interface:&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Compile a string to rust! Takes an input string of source code and an output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * path to write to, and optionally a sysroot. If no sysroot is given, a default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * of /usr/local/ is used.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compile_string&lt;/span&gt;&lt;/span&gt;(input: &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;, output: Path, sysroot: &lt;span class=&quot;built_in&quot;&gt;Option&lt;/span&gt;&amp;lt;Path&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile_simple(StrInput(input), output, sysroot)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compile_file&lt;/span&gt;&lt;/span&gt;(input: Path, output: Path, sysroot: &lt;span class=&quot;built_in&quot;&gt;Option&lt;/span&gt;&amp;lt;Path&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile_simple(FileInput(input), output, sysroot)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compile_simple&lt;/span&gt;&lt;/span&gt;(input: Input, output: Path, sysroot: &lt;span class=&quot;built_in&quot;&gt;Option&lt;/span&gt;&amp;lt;Path&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sess = basic_sess(&lt;span class=&quot;keyword&quot;&gt;match&lt;/span&gt; sysroot &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;Some&lt;/span&gt;(path) =&amp;gt; path,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt; =&amp;gt; Path::new(&lt;span class=&quot;string&quot;&gt;&quot;/usr/local/&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; cfg = build_configuration(&amp;amp;sess);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile_input(sess,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cfg,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;amp;input,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;amp;&lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// output directory (unused when there&#39;s an output file)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;amp;&lt;span class=&quot;literal&quot;&gt;Some&lt;/span&gt;(output), &lt;span class=&quot;comment&quot;&gt;// output file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now you’re all set to be compiling rust from rust!&lt;/p&gt;
&lt;h3 id=&quot;Traits&quot;&gt;&lt;a href=&quot;#Traits&quot; class=&quot;headerlink&quot; title=&quot;Traits&quot;&gt;&lt;/a&gt;Traits&lt;/h3&gt;&lt;p&gt;For bonus points, let’s make this a little more rusty be taking advantage of &lt;code&gt;Trait&lt;/code&gt;s. This will allow us to do away with the type-specialized functions &lt;code&gt;compile_string&lt;/code&gt; and &lt;code&gt;compile_file&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight rust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Compileable&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;to_input&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) -&amp;gt; Input;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; Compileable &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;to_input&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) -&amp;gt; Input &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StrInput(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;impl&lt;/span&gt; Compileable &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Path &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;to_input&lt;/span&gt;&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) -&amp;gt; Input &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FileInput(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compile&lt;/span&gt;&lt;/span&gt;&amp;lt;T: Compileable&amp;gt;(input: T, output: Path, sysroot: &lt;span class=&quot;built_in&quot;&gt;Option&lt;/span&gt;&amp;lt;Path&amp;gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile_simple(&amp;amp;input.to_input(), output, sysroot)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This way we can call &lt;code&gt;compile(mystring, ...)&lt;/code&gt; or &lt;code&gt;compile(mypath, ...)&lt;/code&gt;, and the compiler will translate the calls to &lt;code&gt;compile::&amp;lt;String&amp;gt;(mystring, ...)&lt;/code&gt; and &lt;code&gt;compile::&amp;lt;Path&amp;gt;(mypath, ...)&lt;/code&gt;. Awesome!&lt;/p&gt;
&lt;h2 id=&quot;The-Gotcha&quot;&gt;&lt;a href=&quot;#The-Gotcha&quot; class=&quot;headerlink&quot; title=&quot;The Gotcha&quot;&gt;&lt;/a&gt;The Gotcha&lt;/h2&gt;&lt;p&gt;As it happens, there’s a bug in &lt;code&gt;librustc&lt;/code&gt; that prevents your from compiling multiple files in a row – there’s some global state being stored somewhere, and I don’t as yet know how to reset it (&lt;a href=&quot;https://github.com/rust-lang/rust/issues/19371&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github issue&lt;/a&gt;). So, for the moment, I’ve resorted to just creating a subprocess calling the binary &lt;code&gt;rustc&lt;/code&gt;, which is far from ideal, but works.&lt;/p&gt;
&lt;p&gt;Here’s the code from this post all together in a single file: &lt;a href=&quot;https://github.com/jaredly/itreed/blob/5d0b0fdc544a18aab0fdcf6990beea9c15dce8d4/lib/kernels/rust/compile_inline.rs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;compile_inline.rs&lt;/a&gt;.&lt;/p&gt;
</content:encoded>
      
      <comments>http://jaredly.github.io/2014/11/22/rust-compiling-rust-adventures-with-librustc/#disqus_thread</comments>
    </item>
    
    <item>
      <title>The Hexo static blogging engine gets an admin UI</title>
      <link>http://jaredly.github.io/2014/07/26/the-hexo-static-blogging-engine-gets-an-admin-ui/</link>
      <guid>http://jaredly.github.io/2014/07/26/the-hexo-static-blogging-engine-gets-an-admin-ui/</guid>
      <pubDate>Sun, 27 Jul 2014 05:21:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;I &lt;a href=&quot;/2014/07/26/switching-from-ghost-to-hexo/&quot;&gt;recently switched&lt;/a&gt; from &lt;a href=&quot;http://ghost.org&quot;&gt;ghost&lt;/a&gt; to &lt;a href=&quot;http://hexo.io&quot;&gt;hexo&lt;/a&gt;, and the biggest thing missing for me was the editor interface. So I made one. Currently, it’s mostly a clone of the Ghost interface, but I have some ideas for making it even more awesome.&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;I &lt;a href=&quot;/2014/07/26/switching-from-ghost-to-hexo/&quot;&gt;recently switched&lt;/a&gt; from &lt;a href=&quot;http://ghost.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ghost&lt;/a&gt; to &lt;a href=&quot;http://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;, and the biggest thing missing for me was the editor interface. So I made one. Currently, it’s mostly a clone of the Ghost interface, but I have some ideas for making it even more awesome.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Get the &lt;a href=&quot;https://github.com/jaredly/hexo-admin-plugin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source code&lt;/a&gt;, or &lt;code&gt;npm install --save hexo-admin-plugin&lt;/code&gt; to get this goodness for your hexo blog. &lt;strong&gt;Note:&lt;/strong&gt; There is no security, so don’t use this plugin on a public-facing server. Access @ &lt;a href=&quot;http://localhost:4000/admin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/admin/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ve also put together an &lt;strong&gt;&lt;a href=&quot;http://jaredly.github.io/hexo-admin/admin/&quot;&gt;online demo&lt;/a&gt;&lt;/strong&gt; that’s not connected to a backend - most operations should work, but nothing persists.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://jaredly.github.io/hexo-admin/&quot;&gt;Instructions &amp;amp; Quickstart&lt;/a&gt;&lt;/strong&gt; on the website.&lt;/p&gt;
&lt;h4 id=&quot;Posts-overview&quot;&gt;&lt;a href=&quot;#Posts-overview&quot; class=&quot;headerlink&quot; title=&quot;Posts overview&quot;&gt;&lt;/a&gt;Posts overview&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://jaredly.github.io/hexo-admin/&quot;&gt;&lt;img src=&quot;/images/pasted-0.png&quot; alt=&quot;posts view&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Editor-view&quot;&gt;&lt;a href=&quot;#Editor-view&quot; class=&quot;headerlink&quot; title=&quot;Editor view&quot;&gt;&lt;/a&gt;Editor view&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://jaredly.github.io/hexo-admin/&quot;&gt;&lt;img src=&quot;/images/pasted-1.png&quot; alt=&quot;editor view&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;side-by-side markdown editing&lt;/li&gt;
&lt;li&gt;auto-save posts&lt;/li&gt;
&lt;li&gt;paste to insert an image&lt;/li&gt;
&lt;li&gt;publish/unpublish&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Missing features (which you can still do just fine w/ the raw files):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit categories &amp;amp; tags&lt;/li&gt;
&lt;li&gt;edit publish date/time&lt;/li&gt;
&lt;li&gt;edit slug&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Future awesome:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drag &amp;amp; drop to insert a picture or file&lt;/li&gt;
&lt;li&gt;autocomplete for linking to other posts&lt;/li&gt;
&lt;li&gt;git commit from the UI?&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://jaredly.github.io/2014/07/26/the-hexo-static-blogging-engine-gets-an-admin-ui/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Switching from Ghost to Hexo</title>
      <link>http://jaredly.github.io/2014/07/26/switching-from-ghost-to-hexo/</link>
      <guid>http://jaredly.github.io/2014/07/26/switching-from-ghost-to-hexo/</guid>
      <pubDate>Sat, 26 Jul 2014 21:45:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;My blog used to use &lt;a href=&quot;http://hyde.github.io/&quot;&gt;Hyde&lt;/a&gt;, a python clone of the popular jekyll platform. When &lt;a href=&quot;http://ghost.org&quot;&gt;Ghost&lt;/a&gt; came out, I quickly switched over, due in main part to the great editor and beautiful themes. I used &lt;a href=&quot;https://github.com/axitkhurana/buster&quot;&gt;buster&lt;/a&gt; to serialize the blog so that I could still serve it as a static site. I had two main regrets, though. 1) using buster to scrape ghost was a hack. 2) My posts were locked in an sqlite db, where git could only do a binary diff.&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;My blog used to use &lt;a href=&quot;http://hyde.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hyde&lt;/a&gt;, a python clone of the popular jekyll platform. When &lt;a href=&quot;http://ghost.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ghost&lt;/a&gt; came out, I quickly switched over, due in main part to the great editor and beautiful themes. I used &lt;a href=&quot;https://github.com/axitkhurana/buster&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;buster&lt;/a&gt; to serialize the blog so that I could still serve it as a static site. I had two main regrets, though. 1) using buster to scrape ghost was a hack. 2) My posts were locked in an sqlite db, where git could only do a binary diff.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;So I started looking around again for static blog generators, and found &lt;a href=&quot;http://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;, which looked reasonably capable of doing everything I wanted. I now have my version-controlled markdown posts back and built-in static side generation.&lt;/p&gt;
&lt;p&gt;Now I’m working on building an editor interface :)&lt;/p&gt;
</content:encoded>
      
      <comments>http://jaredly.github.io/2014/07/26/switching-from-ghost-to-hexo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Rust vs Go</title>
      <link>http://jaredly.github.io/2014/03/22/rust-vs-go/</link>
      <guid>http://jaredly.github.io/2014/03/22/rust-vs-go/</guid>
      <pubDate>Sat, 22 Mar 2014 21:57:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Go and Rust seem like natural competitors. They are both trying the role of a C-like low-level language with modern affordances, safety, and nice, clean concurrency. And they’re each backed by a major player in the browser race - go by Google, rust by Mozilla.&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;Go and Rust seem like natural competitors. They are both trying the role of a C-like low-level language with modern affordances, safety, and nice, clean concurrency. And they’re each backed by a major player in the browser race - go by Google, rust by Mozilla.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;I’ve made a few things in &lt;a href=&quot;http://golang.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go&lt;/a&gt;, and I made &lt;a href=&quot;https://github.com/jaredly/rusty-automata&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;my first (non-trivial) program&lt;/a&gt; in &lt;a href=&quot;http://rust-lang.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;rust&lt;/a&gt; this past week, which was a port of &lt;a href=&quot;https://github.com/jaredly/rocks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a program I wrote in go&lt;/a&gt; a few months before. There are many differences between rust and go that I haven’t included here because they haven’t effected me yet.&lt;/p&gt;
&lt;h2 id=&quot;Where-Go-Wins&quot;&gt;&lt;a href=&quot;#Where-Go-Wins&quot; class=&quot;headerlink&quot; title=&quot;Where Go Wins&quot;&gt;&lt;/a&gt;Where Go Wins&lt;/h2&gt;&lt;h3 id=&quot;Stability&quot;&gt;&lt;a href=&quot;#Stability&quot; class=&quot;headerlink&quot; title=&quot;Stability&quot;&gt;&lt;/a&gt;Stability&lt;/h3&gt;&lt;p&gt;Go 1.0 was released 2 years ago, along with some guarantees about backwards compatability going forward. Because of this stability, a community has been able to grow around it, with lots of packages, examples, and tutorials available.&lt;/p&gt;
&lt;p&gt;Rust just released 0.9 in Janurary, which had a number of breaking syntax, type system, and std library changes from 0.8. The roadmap to 1.0 looks like there will be several more breaking changes of various natures as the team nails down how they want the library to behave. As a result of this volatility, many community modules and tutorials are hopelessly out of date, making it more difficult for a community to form.&lt;/p&gt;
&lt;h3 id=&quot;Community&quot;&gt;&lt;a href=&quot;#Community&quot; class=&quot;headerlink&quot; title=&quot;Community&quot;&gt;&lt;/a&gt;Community&lt;/h3&gt;&lt;p&gt;Go has a very active community, a growing number of community modules, and lots of tutorials and examples out there to get you started. There are also some high-profile projects using Go (like Docker), and a number of startups and consulting companies that are all about Go. The go runtime comes with a package manager built in (&lt;code&gt;go get&lt;/code&gt;) that makes dependency management simple.&lt;/p&gt;
&lt;p&gt;Rust’s community, on the other hand, suffers from the volatility described above. Additionally, the Rust package manager was just deprecated, so there is currently no supported solution for package management – you have to clone and install dependencies by hand or with custom makefiles. Fortunately, this will change in the near future; Yehuda Katz and Carl Lerche, who built Ruby’s  “Bundler”, &lt;a href=&quot;https://mail.mozilla.org/pipermail/rust-dev/2014-March/009090.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;have been recruited&lt;/a&gt; to make an awesome package manager “Cargo” for Rust.&lt;/p&gt;
&lt;h3 id=&quot;Standard-Library&quot;&gt;&lt;a href=&quot;#Standard-Library&quot; class=&quot;headerlink&quot; title=&quot;Standard Library&quot;&gt;&lt;/a&gt;Standard Library&lt;/h3&gt;&lt;p&gt;Go has a &lt;a href=&quot;http://static.rust-lang.org/doc/master/std/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;really solid standard library&lt;/a&gt;, making everything from image en/decoding to building a web server to cryptography simple and straightforward.&lt;/p&gt;
&lt;p&gt;Rust’s &lt;a href=&quot;http://static.rust-lang.org/doc/master/std/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;standard library&lt;/a&gt; leaves a lot to be desired. Again, this can be blamed on the general immaturity of the language (it would be a pain to rewrite a huge std library every time the syntax changes).&lt;/p&gt;
&lt;h2 id=&quot;Where-Rust-Wins&quot;&gt;&lt;a href=&quot;#Where-Rust-Wins&quot; class=&quot;headerlink&quot; title=&quot;Where Rust Wins&quot;&gt;&lt;/a&gt;Where Rust Wins&lt;/h2&gt;&lt;h3 id=&quot;The-Type-System&quot;&gt;&lt;a href=&quot;#The-Type-System&quot; class=&quot;headerlink&quot; title=&quot;The Type System&quot;&gt;&lt;/a&gt;The Type System&lt;/h3&gt;&lt;p&gt;Go did some neat things with their type system, like the duck-typing traits and lots of great inference, but nothing that really broke the mold – it felt like C, minus much of the headache.&lt;/p&gt;
&lt;p&gt;One thing that Go doesn’t have is generics. This is an oft-requested feature in the mailing list, but the response from the core team is “we don’t think it’s that important.” Rust has generics.&lt;/p&gt;
&lt;p&gt;Rust’s type system is really breaking the mold in ways that I find really exciting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mutability, not just of data variables but also of pointers, must be declared explicitly&lt;/li&gt;
&lt;li&gt;&lt;p&gt;there are 3 types of pointers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Managed pointers are reference counted by a thread-local GC. &lt;/li&gt;
&lt;li&gt;Owned pointers are allocated and freed &lt;em&gt;automatically by the compiler&lt;/em&gt;. &lt;/li&gt;
&lt;li&gt;Borrowed pointers “borrow” the reference from an owned pointer, with the type-system-enforced promise that they won’t to anything to let the reference escape.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I won’t try to fully explain the type system here; because it’s so much more powerful than many of us procedural folks are used to, it can take some time to wrap your head around it. &lt;strong&gt;Don’t be discouraged&lt;/strong&gt;, though. It’s really awesome once you get to know it.&lt;br&gt;In sum, the type system allows the compiler to make some really neat guarentees about safety and parallelizability. And did I mention the &lt;strong&gt;automatic malloc &amp;amp; free&lt;/strong&gt;? No segfaults. It’s like GC (easy) but without the expense (pausing, reference counting, etc.)!&lt;/p&gt;
&lt;h3 id=&quot;Memory-Management&quot;&gt;&lt;a href=&quot;#Memory-Management&quot; class=&quot;headerlink&quot; title=&quot;Memory Management&quot;&gt;&lt;/a&gt;Memory Management&lt;/h3&gt;&lt;p&gt;In Go, anything that’s not on the stack is garbage collected. If you want more control, you have to resort to unsafe code.&lt;/p&gt;
&lt;p&gt;Rust has GC if you want it, but the type system’s automatic manual memory management is so poweful that reference counted pointers are rarely needed.&lt;/p&gt;
&lt;h3 id=&quot;Functional-Affordances&quot;&gt;&lt;a href=&quot;#Functional-Affordances&quot; class=&quot;headerlink&quot; title=&quot;Functional Affordances&quot;&gt;&lt;/a&gt;Functional Affordances&lt;/h3&gt;&lt;p&gt;There are a number of things in Rust that are inspired by functional programming languages. &lt;/p&gt;
&lt;h5 id=&quot;Everything-is-an-expression&quot;&gt;&lt;a href=&quot;#Everything-is-an-expression&quot; class=&quot;headerlink&quot; title=&quot;Everything is an expression&quot;&gt;&lt;/a&gt;Everything is an expression&lt;/h5&gt;&lt;p&gt;You can, for example, assign the result of an if/else block to a variable.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;let x = if something &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  calculateX()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;Variable-destructuring&quot;&gt;&lt;a href=&quot;#Variable-destructuring&quot; class=&quot;headerlink&quot; title=&quot;Variable destructuring&quot;&gt;&lt;/a&gt;Variable destructuring&lt;/h5&gt;&lt;p&gt;This example might not be terribly comprehensible if you’ve never seen rust before. Trust me it’s cool :)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;struct Point(int, int); // this is a named tuple type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let p1 = Point(23, 24);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let Point(x, y) = p1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if x &amp;gt; 20 &amp;amp;&amp;amp; y &amp;lt; 10 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // etc.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&quot;Match-expressions&quot;&gt;&lt;a href=&quot;#Match-expressions&quot; class=&quot;headerlink&quot; title=&quot;Match expressions&quot;&gt;&lt;/a&gt;Match expressions&lt;/h5&gt;&lt;p&gt;These are amazingly useful. It’s like a switch on steroids.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;enum Shape &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Circle(Point, f64),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Rectangle(Point, Point)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fn area(sh: Shape) -&amp;gt; f64 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  match sh &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // special case: if the radius &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // is less than 10, return the product of x and y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Circle(Point&amp;#123;x, y&amp;#125;, r) if r &amp;lt; 10 =&amp;gt; x * y,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Circle(_, radius) =&amp;gt; PI * radius * radius,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Rectangle(Point&amp;#123;x, y&amp;#125;, Point&amp;#123;x: x2, y: y2&amp;#125;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      let a = (x2 - x) * (y2 - y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      if a &amp;lt; 0 &amp;#123; -a &amp;#125; else &amp;#123; a &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You can also &lt;code&gt;match&lt;/code&gt; on lists.&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;I’m betting on Rust.&lt;/strong&gt; Not that this has to be a competition; both languages might well grow to maturity and achieve popularity. However, it does seem that they are both trying to fill a similar role; a C-like low-level language with modern affordances, safety, and nice, clean concurrency.&lt;/p&gt;
&lt;p&gt;From my experience, the places that Go wins are less to do with intrinsic language features and more due to its first-mover advantage. Of course, a language that no one speaks is dead, so I’m not going to say community doesn’t matter. I just think that once Rust settles down and matures a bit its superior design will shine through and it will become really popular.&lt;/p&gt;
</content:encoded>
      
      <comments>http://jaredly.github.io/2014/03/22/rust-vs-go/#disqus_thread</comments>
    </item>
    
    <item>
      <title>First Impressions of Rust</title>
      <link>http://jaredly.github.io/2014/03/20/first-impressions-of-rust/</link>
      <guid>http://jaredly.github.io/2014/03/20/first-impressions-of-rust/</guid>
      <pubDate>Thu, 20 Mar 2014 22:04:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;A while ago, I made a cellular automata simulator in Go, inspired by &lt;a href=&quot;https://www.youtube.com/watch?v=M4cV0nCIZoc&quot;&gt;this video&lt;/a&gt; about a “rock, paper, scissors” simulation, where there are three “species” of cells which consume each other. &lt;!-- Here&#39;s [a post about that](). --&gt;&lt;/p&gt;
&lt;p&gt;Last week I rewrote this in Rust
      
      </description>
      
      <content:encoded>&lt;p&gt;A while ago, I made a cellular automata simulator in Go, inspired by &lt;a href=&quot;https://www.youtube.com/watch?v=M4cV0nCIZoc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this video&lt;/a&gt; about a “rock, paper, scissors” simulation, where there are three “species” of cells which consume each other. &lt;!-- Here&#39;s [a post about that](). --&gt;&lt;/p&gt;
&lt;p&gt;Last week I rewrote this in Rust&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;, with a number of modifications. There are now four colors, which make the system far more stable, resulting in a much more pleasing simulation (imo).&lt;/p&gt;
&lt;p&gt;Here’s the result:&lt;/p&gt;
&lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/lNFOnomruqk&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;Things-that-worked-well&quot;&gt;&lt;a href=&quot;#Things-that-worked-well&quot; class=&quot;headerlink&quot; title=&quot;Things that worked well&quot;&gt;&lt;/a&gt;Things that worked well&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;I &lt;em&gt;really&lt;/em&gt; like the &lt;code&gt;match&lt;/code&gt; construct&lt;/li&gt;
&lt;li&gt;everything is an expression&lt;/li&gt;
&lt;li&gt;I like the module system, the syntax, etc. Feels comfortable&lt;/li&gt;
&lt;li&gt;the compiler is very helpful, telling you what you did wrong and what you should probably do to fix it&lt;/li&gt;
&lt;li&gt;runtime exceptions are reported well&lt;/li&gt;
&lt;li&gt;the type system, once I understood it, is &lt;em&gt;amazing&lt;/em&gt;. There’s a ton of potential there&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Things-that-didn’t-work-as-well&quot;&gt;&lt;a href=&quot;#Things-that-didn’t-work-as-well&quot; class=&quot;headerlink&quot; title=&quot;Things that didn’t work as well&quot;&gt;&lt;/a&gt;Things that didn’t work as well&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;the macro system wasn’t quite powerful enough to do the things I wanted :( but it’s still cool&lt;/li&gt;
&lt;li&gt;compilation process isn’t blazing fast, but it’s not too bad&lt;/li&gt;
&lt;li&gt;parallelism is currently limited to message passing, whereas I really wanted fork/join functionality for processing the arrays. That should be fixed soon&lt;/li&gt;
&lt;li&gt;the language is still higly volatile; breaking syntax changes happen all the time, which means that many libraries on github are broken&lt;/li&gt;
&lt;li&gt;it took a fair amount of experimentation before I understood the type system enough to make things happen. owner vs borrowed pointers, etc.&lt;/li&gt;
&lt;li&gt;there’s no solution for package management. This should be fixed soon as well&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;Rust is very promising, but to volatile for real work just yet. Once the syntax stabilizes, the standard library is fleshed out, and the community develops, I think it will be incredibly useful.&lt;/p&gt;
</content:encoded>
      
      <comments>http://jaredly.github.io/2014/03/20/first-impressions-of-rust/#disqus_thread</comments>
    </item>
    
    <item>
      <title>The Noble Perceptron</title>
      <link>http://jaredly.github.io/2014/01/29/the-noble-perceptron/</link>
      <guid>http://jaredly.github.io/2014/01/29/the-noble-perceptron/</guid>
      <pubDate>Wed, 29 Jan 2014 22:52:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;The perceptron is one of the most primitive learners, and is also of the easier ones to understand intuitively. I’ll first give some background, and then an animation in javascript with 2D data, and an implementation in python, with graphs of it running on some traditional datasets.&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;The perceptron is one of the most primitive learners, and is also of the easier ones to understand intuitively. I’ll first give some background, and then an animation in javascript with 2D data, and an implementation in python, with graphs of it running on some traditional datasets.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;If you already know what a perceptron is, then you can jump down to the fun stuff.&lt;/p&gt;
&lt;p&gt;The perceptron’s function is &lt;em&gt;binary classification&lt;/em&gt; of &lt;em&gt;linearly separable&lt;/em&gt; classes. Pictures are much faster than words in this case:&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;linearly separable&quot; align=&quot;right&quot; style=&quot;margin:0 10px&quot; src=&quot;/images/Screenshot___01282014___09_39_31_AM.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can see red, and green, and there’s a way to draw a line between them. This means they are linearly separable. The &lt;em&gt;binary&lt;/em&gt; part means that the perceptron only functions where there are only two groups.&lt;/p&gt;
&lt;h3 id=&quot;Why-do-we-care&quot;&gt;&lt;a href=&quot;#Why-do-we-care&quot; class=&quot;headerlink&quot; title=&quot;Why do we care?&quot;&gt;&lt;/a&gt;Why do we care?&lt;/h3&gt;&lt;p&gt;The problem of classification in machine learning is essentially: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have some data, and I’ve gone through and classified it into some groups. When I see some new data, can I automatically figure out the group without going in by hand?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, a hospital information about thousands of heart attack patients, their blood preassure and BMI, and they also have recorded whether or not the person had another heart attack within the next year.&lt;/p&gt;
&lt;p&gt;What they want from that is to be able to predict for future patients whether they will have another heart attack in the next year, just based on those two data points. &lt;em&gt;In the real world there would probably be a dozen “features”, not just two&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;“Training”-data&quot;&gt;&lt;a href=&quot;#“Training”-data&quot; class=&quot;headerlink&quot; title=&quot;“Training” data&quot;&gt;&lt;/a&gt;“Training” data&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BP  | BMI | Heart Attack?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100 | 80  | N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150 | 100 | Y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120 | 90  | N&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130 | 60  | N&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Then someone comes in with a blood preassure of 125 and a BMI of 105, and we want to know whether he will have another heart attack.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In sum&lt;/strong&gt; the perceptron finds a line to divide the two groups (if one exists), and then with future data you just calculate on which side of the line they fall.&lt;/p&gt;
&lt;h3 id=&quot;The-Math-behind-the-Magic&quot;&gt;&lt;a href=&quot;#The-Math-behind-the-Magic&quot; class=&quot;headerlink&quot; title=&quot;The Math behind the Magic&quot;&gt;&lt;/a&gt;The Math behind the Magic&lt;/h3&gt;&lt;p&gt;Each “feature” or dimention gets a weight, and these weights essentially indicate how useful the given feature is at differentiating between the two classes. As the perceptron “learns” the training data (the stuff you have that is already classified), it adjusts the weights until it finds the right line.&lt;/p&gt;
&lt;p&gt;The line is defined by &lt;code&gt;x1 * w1 + x2 * w2 + ... + xn * wn = 0&lt;/code&gt;, where the &lt;code&gt;w&lt;/code&gt;s are the weights, and the &lt;code&gt;x&lt;/code&gt;s are the features of a given data item.&lt;/p&gt;
&lt;p&gt;To train a perceptron, the labeled training data is typically split up into a training set and a test set. That way the classifier can be trained on the training set, and its final accuracy can be evaluated on the test set.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Perceptron&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Check out the wikipedia article for more&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Javascript-Animation&quot;&gt;&lt;a href=&quot;#Javascript-Animation&quot; class=&quot;headerlink&quot; title=&quot;Javascript Animation&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.khanacademy.org/cs/perceptron-oo/4747053005537280&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Javascript Animation&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I created this so that I could get a better intuition as to &lt;em&gt;how it really works&lt;/em&gt;. It was interesting to see how much the “decision line” moves around - much more than I would have expected. The weights, however, tend to follow a more deterministic course (at least when the set is separable).&lt;/p&gt;
&lt;p&gt;Dataset #8 is &lt;em&gt;not&lt;/em&gt; linearly separable, so the perceptron will never settle. In my python implementation I was smart about recognizing this, but the javascript animation will just bounce around forever.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.khanacademy.org/cs/perceptron-oo/4747053005537280&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;View in Khan Academy’s environment&lt;/a&gt;&lt;/p&gt;
&lt;script src=&quot;http://www.khanacademy.org/cs/perceptron-oo/4747053005537280/embed.js?editor=no&amp;amp;buttons=no&amp;amp;author=no&amp;amp;embed=yes&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;Python-implementation&quot;&gt;&lt;a href=&quot;#Python-implementation&quot; class=&quot;headerlink&quot; title=&quot;Python implementation&quot;&gt;&lt;/a&gt;Python implementation&lt;/h2&gt;&lt;p&gt;The ipython notebook where I came up with these results can be viewed in the ipython notebook viewer &lt;a href=&quot;http://nbviewer.ipython.org/gist/jaredly/8630326/Perceptron.ipynb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;. The source code is &lt;a href=&quot;https://github.com/jaredly/perceptron&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;on github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The perceptron quit either when it fully classified the training set, or when no progress was made in training set accuracy for 20 epochs.&lt;/p&gt;
&lt;h3 id=&quot;Voting-Dataset&quot;&gt;&lt;a href=&quot;#Voting-Dataset&quot; class=&quot;headerlink&quot; title=&quot;Voting Dataset&quot;&gt;&lt;/a&gt;Voting Dataset&lt;/h3&gt;&lt;p&gt;The data here comes from the US 1984 congressional voting records, where there are a number of items on the ballot (yes/no), and then a label “democrat” or “republican”. I discretized ‘yes’ to be 1 and ‘no’ to 0.&lt;/p&gt;
&lt;p&gt;Because of the multi-dimentionality of the dataset (16 features) I can’t plot out the actual data points for you, but I did chart the movement of the weights for each of the features:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/votinh.png&quot; alt=&quot;voting weights&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here, if a line is above zero, it means (kindof) that “yes” was more associated with democrats, whereas if it’s below zero, “yes” is more associated with republicans. It’s of course more comlicated than that, but that’s the description that is easiest to envision.&lt;/p&gt;
&lt;p&gt;I split the data 70-30, where 70% of the data was given to the perceptron to train on, and then 30% was used at the very end to “test” the classifier.&lt;/p&gt;
&lt;p&gt;I ran it 5 times with different random splits (always 70-30), and the perceptron averaged 93% accuracy! Which I think is really cool.&lt;/p&gt;
&lt;p&gt;Also, from looking at the weights we can get a feeling for where republicans and democrats differ most strongly. For example, congress members who voted “yes” on the “physicial-fee-freeze” bill where very likely republican, whereas those who voted “yes” on the “anti-satellite-test-ban” (whatever that was) where more likely democrat.&lt;/p&gt;
&lt;h3 id=&quot;Iris-Dataset&quot;&gt;&lt;a href=&quot;#Iris-Dataset&quot; class=&quot;headerlink&quot; title=&quot;Iris Dataset&quot;&gt;&lt;/a&gt;Iris Dataset&lt;/h3&gt;&lt;p&gt;This dataset involves just 4 measurements on different specimens of three different species of iris. In order to classify this with a perceptron, I actually used 3, and each perceptron only had to distinguish between two of the species. Then at the end, the three perceptrons would “vote” on what they thought it was, and the class with the most votes won.&lt;/p&gt;
&lt;p&gt;Here we have graphed the weights of each of the perceptrons.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/download.png&quot; alt=&quot;perceptron-1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/download__1_.png&quot; alt=&quot;perceptron-2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/download__2_.png&quot; alt=&quot;perceptron-3&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/download__3_.png&quot; alt=&quot;accuracy&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the first two pairs of flowers are easily distinguishable using those four measurements. After two epochs, both perceptrons are achieving 100% accuracy on the training set.&lt;/p&gt;
&lt;p&gt;The last pair, versicolor vs verginica, causes trouble, though. Their characteristics apparently overlap just enough to cause confusion, such that the perceptron is not able to find a hyperplane to separate the two. This is manifest in the results as well; the afterage test-set accuracy from 5 independant runs was 89%.&lt;/p&gt;
</content:encoded>
      
      <comments>http://jaredly.github.io/2014/01/29/the-noble-perceptron/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Photon Ray Tracing</title>
      <link>http://jaredly.github.io/2014/01/20/photon-ray-tracing/</link>
      <guid>http://jaredly.github.io/2014/01/20/photon-ray-tracing/</guid>
      <pubDate>Mon, 20 Jan 2014 22:36:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;A few months ago I saw @scanlime’s “Zen Photon Garden” on hacker news, and was really impressed. In short, you draw walls/mirrors with your mouse, and it ray-traces light from a central source. Very beautiful and “zen”. However, as a programmer, drawing lines by hand was far too inaccurate. So I forked it and added a scriptable interface for adding walls.&lt;/p&gt;
      
      </description>
      
      <content:encoded>&lt;p&gt;A few months ago I saw @scanlime’s “Zen Photon Garden” on hacker news, and was really impressed. In short, you draw walls/mirrors with your mouse, and it ray-traces light from a central source. Very beautiful and “zen”. However, as a programmer, drawing lines by hand was far too inaccurate. So I forked it and added a scriptable interface for adding walls.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Here are some of the designs I came up with:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/gallery.png&quot; alt=&quot;example&quot;&gt;&lt;/p&gt;
&lt;p&gt;But don’t take my word for it; &lt;a href=&quot;http://jaredly.github.io/zenphoton/html/&quot;&gt;play with it yourself&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And here’s a screenshot of the full UI&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Selection_048.png&quot; alt=&quot;screenshot&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Things-I-still-want-to-do&quot;&gt;&lt;a href=&quot;#Things-I-still-want-to-do&quot; class=&quot;headerlink&quot; title=&quot;Things I still want to do&quot;&gt;&lt;/a&gt;Things I still want to do&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;clean up the UI a bit more&lt;/li&gt;
&lt;li&gt;use Ace editor instead of a textarea for the code&lt;/li&gt;
&lt;li&gt;allow you to reference github gists for the code &amp;amp; config&lt;/li&gt;
&lt;li&gt;the config sliders don’t reload when you change the json&lt;/li&gt;
&lt;li&gt;I’d actually like to dump coffeescript, maybe rewrite the thing in React&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
      
      <comments>http://jaredly.github.io/2014/01/20/photon-ray-tracing/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
