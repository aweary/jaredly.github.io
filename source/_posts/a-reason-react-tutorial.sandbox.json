{"normal":{"Main.re":"ReactDOMRe.renderToElementWithId <TodoApp /> \"root\";","TodoApp.re":"let component = ReasonReact.statelessComponent \"TodoApp\";\n\nlet make children => {\n  ...component,\n  render: fun () self => {\n    <div className=\"app\">\n      <div className=\"title\">\n        (ReasonReact.stringToElement \"What to do\")\n      </div>\n      <div className=\"items\">\n        (ReasonReact.stringToElement \"Nothing\")\n      </div>\n    </div>\n  }\n};","TodoApp_1_1.re":"type item = {\n  title: string,\n  completed: bool,\n};\ntype state = {\n  /* this is a type w/ a type argument,\n   * similar to List<Item> in TypeScript,\n   * Flow, or Java */\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\n/* I've gone ahead and made a shortened name for converting strings to elements */\nlet se = ReasonReact.stringToElement;\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {items} self => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n      </div>\n      <div className=\"items\">\n        (se \"Nothing\")\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \"items\"))\n      </div>\n    </div>\n  }\n};","TodoApp_1_2.re":"type item = {\n  title: string,\n  completed: bool,\n};\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet newItem () => {title: \"Click a button\", completed: true};\n\nlet se = ReasonReact.stringToElement;\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {items} self => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(fun evt => Js.log \"didn't add something\")\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (se \"Nothing\")\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \"items\"))\n      </div>\n    </div>\n  }\n};","TodoApp_1_3.re":"type item = {\n  title: string,\n  completed: bool,\n};\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet newItem () => {title: \"Click a button\", completed: true};\n\nlet se = ReasonReact.stringToElement;\n\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {items} self => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(self.update (fun evt state self => {\n            ReasonReact.Update {\n              ...state,\n              items: [newItem(), ...state.items]\n            }\n          }))\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (se \"Nothing\")\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \"items\"))\n      </div>\n    </div>\n  }\n};","TodoApp_2_1.re":"type item = {\n  title: string,\n  completed: bool,\n};\n\nlet se = ReasonReact.stringToElement;\n\nlet module TodoItem = {\n  let component = ReasonReact.statelessComponent \"TodoItem\";\n  let make ::item children => {\n    ...component,\n    render: fun () _ =>\n      <div className=\"item\">\n        <input\n          _type=\"checkbox\"\n          checked=(Js.Boolean.to_js_boolean item.completed)\n          /* TODO make interactive */\n        />\n        (se item.title)\n      </div>\n  };\n};\n\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet newItem () => {title: \"Click a button\", completed: true};\n\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {items} self => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(self.update (fun evt state self => {\n            ReasonReact.Update {\n              ...state,\n              items: [newItem(), ...state.items]\n            }\n          }))\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (ReasonReact.arrayToElement\n          (Array.of_list\n            (List.map (fun item => <TodoItem item />) items)\n          )\n        )\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \"items\"))\n      </div>\n    </div>\n  }\n};","TodoApp_2_2.re":"type item = {\n  id: int,\n  title: string,\n  completed: bool,\n};\n\nlet se = ReasonReact.stringToElement;\n\nlet module TodoItem = {\n  let component = ReasonReact.statelessComponent \"TodoItem\";\n  let make ::item children => {\n    ...component,\n    render: fun () _ =>\n      <div className=\"item\">\n        <input\n          _type=\"checkbox\"\n          checked=(Js.Boolean.to_js_boolean item.completed)\n          /* TODO make interactive */\n        />\n        (se item.title)\n      </div>\n  };\n};\n\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet lastId = 0;\nlet newItem () => {\n  let lastId = lastId + 1;\n  {id: lastId, title: \"Click a button\", completed: true};\n};\n\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      id: 0,\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {items} self => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(self.update (fun evt state self => {\n            ReasonReact.Update {\n              ...state,\n              items: [newItem(), ...state.items]\n            }\n          }))\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (ReasonReact.arrayToElement\n          (Array.of_list\n            (List.map (fun item => <TodoItem item />) items)\n          )\n        )\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \"items\"))\n      </div>\n    </div>\n  }\n};","TodoApp_2_3.re":"type item = {\n  id: int,\n  title: string,\n  completed: bool,\n};\n\nlet se = ReasonReact.stringToElement;\n\nlet module TodoItem = {\n  let component = ReasonReact.statelessComponent \"TodoItem\";\n  let make ::item children => {\n    ...component,\n    render: fun () _ =>\n      <div className=\"item\">\n        <input\n          _type=\"checkbox\"\n          checked=(Js.Boolean.to_js_boolean item.completed)\n          /* TODO make interactive */\n        />\n        (se item.title)\n      </div>\n  };\n};\n\ntype state = {\n  items: list item,\n};\n\nlet component = ReasonReact.statefulComponent \"TodoApp\";\n\nlet lastId = ref 0;\nlet newItem () => {\n  lastId := !lastId + 1;\n  {id: !lastId, title: \"Click a button\", completed: true};\n};\n\nlet make children => {\n  ...component,\n  initialState: fun () => {\n    items: [{\n      id: 0,\n      title: \"Write some things to do\",\n      completed: false,\n    }]\n  },\n  render: fun {items} self => {\n    let numItems = List.length items;\n    <div className=\"app\">\n      <div className=\"title\">\n        (se \"What to do\")\n        <button\n          onClick=(self.update (fun evt state self => {\n            ReasonReact.Update {\n              ...state,\n              items: [newItem(), ...state.items]\n            }\n          }))\n        >\n          (se \"Add something\")\n        </button>\n      </div>\n      <div className=\"items\">\n        (ReasonReact.arrayToElement\n          (Array.of_list\n            (List.map (fun item => <TodoItem\n              key=(string_of_int item.id)\n              item\n            />) items)\n          )\n        )\n      </div>\n      <div className=\"footer\">\n        (se ((string_of_int numItems) ^ \"items\"))\n      </div>\n    </div>\n  }\n};"},"render":{"0":"ReactDOMRe.renderToElementWithId <TodoApp /> \"root\" /* TODO TodoApp_final */","1":"ReactDOMRe.renderToElementWithId <TodoApp /> \"root\";","2":"ReactDOMRe.renderToElementWithId <TodoApp /> \"root\";","3":"ReactDOMRe.renderToElementWithId <TodoApp_1_1 /> \"root\";","4":"ReactDOMRe.renderToElementWithId <TodoApp_1_2 /> \"root\";","5":"ReactDOMRe.renderToElementWithId <TodoApp_1_3 /> \"root\";","6":"let module TodoItem = TodoApp_2_1.TodoItem;\nReactDOMRe.renderToElementWithId <TodoItem item={TodoApp_2_1.title: \"Hello world\", completed: false} /> \"root\";","7":"ReactDOMRe.renderToElementWithId <TodoApp_2_1 /> \"root\";","8":"ReactDOMRe.renderToElementWithId <TodoApp_2_3 /> \"root\";"},"embed":{"base.css":"/* reset */\nbody, div {\n    display: flex;\n    flex-direction: column;\n    box-sizing: border-box;\n    flex-shrink: 0;\n}\n\nbody {\n  font: 14px \"Century Gothic\", Futura, sans-serif;\n}\n\n#root {\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n}\n\n.app {\n  width: 280px;\n  max-height: 600px;\n  flex: 1;\n  box-shadow: 0 2px 15px #ccc;\n  margin: 10px;\n  align-items: stretch;\n}\n\n.title {\n  font-size: 20px;\n  align-items: center;\n  padding: 20px;\n}\n\n.items {\n  margin: 10px 0;\n  text-align: center;\n  flex: 1;\n  overflow: auto;\n}\n\n.footer {\n  align-items: flex-start;\n  padding: 5px 10px;\n}\n\n.item {\n  padding: 10px 20px;\n  align-items: center;\n  flex-direction: row;\n}\n\n.checkbox {\n  margin-right: 20px;\n}"}}