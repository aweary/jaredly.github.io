<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[Jared Forsyth]]></title>
    <link>https://jaredforsyth.com/</link>
    <atom:link href="categories/Tech/rss.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[A blog about web development, programming languages, react, etc.]]></description>
    <pubDate>2017-06-03T18:37:36.000Z</pubDate>
    <generator>http://zespia.tw/hexo/</generator>
    
    <item>
      <title><![CDATA[Visualizing Reactive Streams: Hot and Cold Observables]]></title>
      <link>https://jaredforsyth.com/2015/03/06/visualizing-reactive-streams-hot-and-cold/</link>
      <guid>https://jaredforsyth.com/2015/03/06/visualizing-reactive-streams-hot-and-cold/</guid>
      <pubDate>Fri, 06 Mar 2015 15:21:00 GMT</pubDate>
      <description>
      <![CDATA[<p>Reactive Programming is getting a lot of attention these days, and it promises to reduce frustration, bugs, and greenhouse gas emissions. Unfortunately, there’s a sizeable learning curve involved while you try and get your head to think in streams instead of imperative sequential processes.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>Reactive Programming is getting a lot of attention these days, and it promises to reduce frustration, bugs, and greenhouse gas emissions. Unfortunately, there’s a sizeable learning curve involved while you try and get your head to think in streams instead of imperative sequential processes.</p>
<a id="more"></a>
<blockquote>
<p>In order to greatly ease the mental burden involved, I’ve created a tool that allows you to <strong>visualize the streams</strong> in real time, removing the guesswork. It’s called <a href="https://jaredly.github.io/rxvision">RxVision</a> and you should check it out.</p>
</blockquote>
<p>One of the things that caught me by suprise is the difference between <code>hot</code> and <code>cold</code> observables, and how they interact with multiple observers.</p>
<p><strong>In this article, I will:</strong></p>
<ul>
<li><a href="#Learning_Rx_and_Duplicate_Ajax_Calls">give some background &amp; describe the cold-induced bug</a></li>
<li><a href="#Stone_cold">give &amp; explain a trivial example demonstrating this bug</a></li>
<li><a href="#Cold_Multiplication">explain the bug in the larger example</a></li>
<li><a href="#Cleaning_up_with_a_little_heat">show how to fix the bug in the larger example</a></li>
</ul>
<p>All with lots of visuals. Enjoy!</p>
<h2 id="Learning-Rx-and-Duplicate-Ajax-Calls"><a href="#Learning-Rx-and-Duplicate-Ajax-Calls" class="headerlink" title="Learning Rx and Duplicate Ajax Calls"></a>Learning Rx and Duplicate Ajax Calls</h2><p>My first real experience playing with reactive streams was by means of <a href="https://github.com/staltz" target="_blank" rel="external">@staltz</a>‘s excellent <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="external">tutorial</a>, in which you build a simple “Who to follow” box, similar to the one on twitter.</p>
<p><img src="/images/pasted-17.png" alt="The who to follow box"></p>
<p>Just to make sure I really understood what was going on, I <a href="https://gist.github.com/jaredly/fee1bd6346ea95144d27" target="_blank" rel="external">rewrote the demo in clojurescript</a>.</p>
<p>Essentially, what the box does is get the <code>users.json</code> list from github (at a random offset), and randomly pick 3 of the 100 in that list to display to you. Clicking <code>x</code> next to one of the users replaces that line with a new user (drawn from the 100). Clicking <code>refresh</code> triggers a request to the <code>users.json</code> api endpoint again, this time with a different offset.</p>
<p>While debugging my clojurescript version, I saw in devtools that when refresh was clicked, there were <strong>3 ajax requests instead of one</strong>. Confused, I searched through the article, and eventually found in the comments section my answer: the issue was <code>hot</code> vs <code>cold</code> observables.</p>
<h2 id="Stone-cold"><a href="#Stone-cold" class="headerlink" title="Stone cold"></a>Stone cold</h2><p>Cold observables essentially replicate themselves for each new observer - and this works <strong>retroactively</strong> up the chain of observables.</p>
<p>For a somewhat trivial example:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> btn = $(<span class="string">'button'</span>)[<span class="number">0</span>]</div><div class="line"><span class="keyword">let</span> clicks = Rx.Observable.fromEvent(btn, <span class="string">'click'</span>)</div><div class="line">clicks.subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'clicked!'</span>))</div><div class="line"></div><div class="line"><span class="keyword">let</span> values = clicks.map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">2</span>))</div><div class="line"><span class="keyword">let</span> less1 = values.map(<span class="function"><span class="params">value</span> =&gt;</span> value - <span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> times2 = less1.map(<span class="function"><span class="params">value</span> =&gt;</span> value*<span class="number">2</span>)</div><div class="line"></div><div class="line">times2.subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'i got a value'</span>, value))</div><div class="line">times2.subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'also subscribing'</span>, value))</div><div class="line">values.subscribe(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'the original was'</span>, value))</div></pre></td></tr></table></figure></p>
<blockquote>
<p>you can follow along in the <a href="http://jaredly.github.io/rxvision/examples/playground/">RxVision playground</a></p>
</blockquote>
<p>You would expect that the two <code>times2</code> subscriptions would return the same number, right? <em>they don’t</em>. Take a look at the flow of values here:</p>
<p><img src="/images/pasted-14.png" alt="one flow for each subscriber"></p>
<p>The “click” event is duplicated <em>four times</em>, once for each subscriber. The first <code>map</code>, which generates a random number, therefore generates <strong>3 different numbers</strong>, one for each subscriber down the chain.</p>
<p>To fix that obvious bug, we have to make the random mapper <code>hot</code>, by adding <code>.share()</code> at the end. Line 5 now looks like:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> values = clicks.map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">2</span>)).share()</div></pre></td></tr></table></figure>
<p>This makes our <code>console.log</code>s give the right values, but the flow diagram still shows some duplication:</p>
<p><img src="/images/pasted-15.png" alt="still some duplication."></p>
<p>To fully deduplicate, we need to add <code>.share()</code> to every observable that is observed more than once (in this case, line 2 and line 7).</p>
<p><img src="/images/pasted-18.png" alt="doesn&#39;t that look so much cleaner?"></p>
<p>So how does this play out in a somewhat less trivial example?</p>
<h2 id="Cold-Multiplication"><a href="#Cold-Multiplication" class="headerlink" title="Cold Multiplication"></a>Cold Multiplication</h2><p>To demonstrate the issue, I ran the original demo code under the following user actions:</p>
<ul>
<li>load the page</li>
<li>click <code>x</code> next to the first two people</li>
<li>click <code>refresh</code></li>
<li>click <code>x</code> next to the third person</li>
<li>click <code>refresh again</code></li>
</ul>
<p>This is a screenshot of <a href="https://jaredly.github.io/rxvision">RxVision</a> which visualizes the flow of values between streams.</p>
<blockquote>
<p>Here, too you can follow along on <a href="http://jaredly.github.io/rxvision/examples/gh-follow/">the demo page I made</a>. The code there represents the fully deduplicated version.</p>
</blockquote>
<p><img src="/images/pasted-7.png" alt="Original code - lots of duplicate events"></p>
<blockquote>
<p>Each light gray block represents an “async group” – e.g., all of the events happened within a single tick of the js event loop.</p>
</blockquote>
<p>There are lots of things going on here, so let’s dissect it:</p>
<ul>
<li>those blue <code>create</code> streams each represent an individual Ajax request. Within the first tick, 3 requests get fired off. You can see the <code>startWith</code> observable that initiates this pushes out the same value 3 times – this is definitely a <code>hot</code> vs <code>cold</code> problem.</li>
<li>the refresh button click (the very top stream) fires off <strong>6 times</strong> when it is clicked once. Three of those times are to clear each UI list item, and then 3 other times for our duplicated ajax calls.</li>
</ul>
<h2 id="Cleaning-up-with-a-little-heat"><a href="#Cleaning-up-with-a-little-heat" class="headerlink" title="Cleaning up with a little heat"></a>Cleaning up with a little heat</h2><p>As with the first example, the way to fix duplication is the <code>.share()</code> method of an observable. To stop the duplicate requesting, we just <code>.share()</code> the <code>responseStream</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> responseStream = requestStream.flatMap(ajaxGet).share();</div></pre></td></tr></table></figure>
<p>That was easy. Now it looks like this:</p>
<p><img src="/images/pasted-6.png" alt="Ajax deduped, but click handler still going crazy"></p>
<p>Note that there are now only 3 ajax requests (the <code>create</code> streams), one for the initial and two more for the times we clicked <code>refresh</code>. However, the refresh button click handler is still duplicating, so we need to <code>share()</code> that too:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> refreshClickStream = Rx.Observable.fromEvent(refreshButton, <span class="string">'click'</span>).share();</div></pre></td></tr></table></figure>
<p>The data flow chart now looks much cleaner, and duplication has been eliminated.<br><img src="/images/pasted-16.png" alt="Order has been restored"></p>
<h2 id="What-have-we-learned"><a href="#What-have-we-learned" class="headerlink" title="What have we learned?"></a>What have we learned?</h2><ul>
<li>It’s easier to debug something you can look at.</li>
<li>Whenever an observable is subscribed to more than once, make it hot with <code>.share()</code> to make all subscribers see the same thing.</li>
</ul>
<p>Thanks for your time, and if you check out <a href="https://jaredly.github.io/rxvision">RxVision</a>, let me know what you think!</p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2015/03/06/visualizing-reactive-streams-hot-and-cold/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[The Hexo static blogging engine gets an admin UI]]></title>
      <link>https://jaredforsyth.com/2014/07/27/the-hexo-static-blogging-engine-gets-an-admin-ui/</link>
      <guid>https://jaredforsyth.com/2014/07/27/the-hexo-static-blogging-engine-gets-an-admin-ui/</guid>
      <pubDate>Sun, 27 Jul 2014 05:21:00 GMT</pubDate>
      <description>
      <![CDATA[<p>I <a href="/2014/07/26/switching-from-ghost-to-hexo/">recently switched</a> from <a href="http://ghost.org">ghost</a> to <a href="http://hexo.io">hexo</a>, and the biggest thing missing for me was the editor interface. So I made one. Currently, it’s mostly a clone of the Ghost interface, but I have some ideas for making it even more awesome.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>I <a href="/2014/07/26/switching-from-ghost-to-hexo/">recently switched</a> from <a href="http://ghost.org" target="_blank" rel="external">ghost</a> to <a href="http://hexo.io" target="_blank" rel="external">hexo</a>, and the biggest thing missing for me was the editor interface. So I made one. Currently, it’s mostly a clone of the Ghost interface, but I have some ideas for making it even more awesome.</p>
<a id="more"></a>
<p>Get the <a href="https://github.com/jaredly/hexo-admin-plugin" target="_blank" rel="external">source code</a>, or <code>npm install --save hexo-admin-plugin</code> to get this goodness for your hexo blog. <strong>Note:</strong> There is no security, so don’t use this plugin on a public-facing server. Access @ <a href="http://localhost:4000/admin/" target="_blank" rel="external">http://localhost:4000/admin/</a></p>
<p>I’ve also put together an <strong><a href="http://jaredly.github.io/hexo-admin/admin/">online demo</a></strong> that’s not connected to a backend - most operations should work, but nothing persists.</p>
<p><strong><a href="http://jaredly.github.io/hexo-admin/">Instructions &amp; Quickstart</a></strong> on the website.</p>
<h4 id="Posts-overview"><a href="#Posts-overview" class="headerlink" title="Posts overview"></a>Posts overview</h4><p><a href="http://jaredly.github.io/hexo-admin/"><img src="/images/pasted-0.png" alt="posts view"></a></p>
<h4 id="Editor-view"><a href="#Editor-view" class="headerlink" title="Editor view"></a>Editor view</h4><p><a href="http://jaredly.github.io/hexo-admin/"><img src="/images/pasted-1.png" alt="editor view"></a></p>
<p><strong>Features:</strong></p>
<ul>
<li>side-by-side markdown editing</li>
<li>auto-save posts</li>
<li>paste to insert an image</li>
<li>publish/unpublish</li>
</ul>
<p><strong>Missing features (which you can still do just fine w/ the raw files):</strong></p>
<ul>
<li>edit categories &amp; tags</li>
<li>edit publish date/time</li>
<li>edit slug</li>
</ul>
<p><strong>Future awesome:</strong></p>
<ul>
<li>drag &amp; drop to insert a picture or file</li>
<li>autocomplete for linking to other posts</li>
<li>git commit from the UI?</li>
</ul>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2014/07/27/the-hexo-static-blogging-engine-gets-an-admin-ui/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Switching from Ghost to Hexo]]></title>
      <link>https://jaredforsyth.com/2014/07/26/switching-from-ghost-to-hexo/</link>
      <guid>https://jaredforsyth.com/2014/07/26/switching-from-ghost-to-hexo/</guid>
      <pubDate>Sat, 26 Jul 2014 21:45:00 GMT</pubDate>
      <description>
      <![CDATA[<p>My blog used to use <a href="http://hyde.github.io/">Hyde</a>, a python clone of the popular jekyll platform. When <a href="http://ghost.org">Ghost</a> came out, I quickly switched over, due in main part to the great editor and beautiful themes. I used <a href="https://github.com/axitkhurana/buster">buster</a> to serialize the blog so that I could still serve it as a static site. I had two main regrets, though. 1) using buster to scrape ghost was a hack. 2) My posts were locked in an sqlite db, where git could only do a binary diff.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>My blog used to use <a href="http://hyde.github.io/" target="_blank" rel="external">Hyde</a>, a python clone of the popular jekyll platform. When <a href="http://ghost.org" target="_blank" rel="external">Ghost</a> came out, I quickly switched over, due in main part to the great editor and beautiful themes. I used <a href="https://github.com/axitkhurana/buster" target="_blank" rel="external">buster</a> to serialize the blog so that I could still serve it as a static site. I had two main regrets, though. 1) using buster to scrape ghost was a hack. 2) My posts were locked in an sqlite db, where git could only do a binary diff.</p>
<a id="more"></a>
<p>So I started looking around again for static blog generators, and found <a href="http://hexo.io" target="_blank" rel="external">Hexo</a>, which looked reasonably capable of doing everything I wanted. I now have my version-controlled markdown posts back and built-in static side generation.</p>
<p>Now I’m working on building an editor interface :)</p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2014/07/26/switching-from-ghost-to-hexo/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[First Impressions of Rust]]></title>
      <link>https://jaredforsyth.com/2014/03/20/first-impressions-of-rust/</link>
      <guid>https://jaredforsyth.com/2014/03/20/first-impressions-of-rust/</guid>
      <pubDate>Thu, 20 Mar 2014 22:04:00 GMT</pubDate>
      <description>
      <![CDATA[<p>A while ago, I made a cellular automata simulator in Go, inspired by <a href="https://www.youtube.com/watch?v=M4cV0nCIZoc">this video</a> about a “rock, paper, scissors” simulation, where there are three “species” of cells which consume each other. <!-- Here's [a post about that](). --></p>
<p>Last week I rewrote this in Rust]]>
      
      </description>
      <content:encoded><![CDATA[<p>A while ago, I made a cellular automata simulator in Go, inspired by <a href="https://www.youtube.com/watch?v=M4cV0nCIZoc" target="_blank" rel="external">this video</a> about a “rock, paper, scissors” simulation, where there are three “species” of cells which consume each other. <!-- Here's [a post about that](). --></p>
<p>Last week I rewrote this in Rust<a id="more"></a>, with a number of modifications. There are now four colors, which make the system far more stable, resulting in a much more pleasing simulation (imo).</p>
<p>Here’s the result:</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/lNFOnomruqk" frameborder="0" allowfullscreen></iframe></div>
<p><br></p>
<h3 id="Things-that-worked-well"><a href="#Things-that-worked-well" class="headerlink" title="Things that worked well"></a>Things that worked well</h3><ul>
<li>I <em>really</em> like the <code>match</code> construct</li>
<li>everything is an expression</li>
<li>I like the module system, the syntax, etc. Feels comfortable</li>
<li>the compiler is very helpful, telling you what you did wrong and what you should probably do to fix it</li>
<li>runtime exceptions are reported well</li>
<li>the type system, once I understood it, is <em>amazing</em>. There’s a ton of potential there</li>
</ul>
<h3 id="Things-that-didn’t-work-as-well"><a href="#Things-that-didn’t-work-as-well" class="headerlink" title="Things that didn’t work as well"></a>Things that didn’t work as well</h3><ul>
<li>the macro system wasn’t quite powerful enough to do the things I wanted :( but it’s still cool</li>
<li>compilation process isn’t blazing fast, but it’s not too bad</li>
<li>parallelism is currently limited to message passing, whereas I really wanted fork/join functionality for processing the arrays. That should be fixed soon</li>
<li>the language is still higly volatile; breaking syntax changes happen all the time, which means that many libraries on github are broken</li>
<li>it took a fair amount of experimentation before I understood the type system enough to make things happen. owner vs borrowed pointers, etc.</li>
<li>there’s no solution for package management. This should be fixed soon as well</li>
</ul>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Rust is very promising, but to volatile for real work just yet. Once the syntax stabilizes, the standard library is fleshed out, and the community develops, I think it will be incredibly useful.</p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2014/03/20/first-impressions-of-rust/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[The Noble Perceptron]]></title>
      <link>https://jaredforsyth.com/2014/01/29/the-noble-perceptron/</link>
      <guid>https://jaredforsyth.com/2014/01/29/the-noble-perceptron/</guid>
      <pubDate>Wed, 29 Jan 2014 22:52:00 GMT</pubDate>
      <description>
      <![CDATA[<p>The perceptron is one of the most primitive learners, and is also of the easier ones to understand intuitively. I’ll first give some background, and then an animation in javascript with 2D data, and an implementation in python, with graphs of it running on some traditional datasets.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>The perceptron is one of the most primitive learners, and is also of the easier ones to understand intuitively. I’ll first give some background, and then an animation in javascript with 2D data, and an implementation in python, with graphs of it running on some traditional datasets.</p>
<a id="more"></a>
<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>If you already know what a perceptron is, then you can jump down to the fun stuff.</p>
<p>The perceptron’s function is <em>binary classification</em> of <em>linearly separable</em> classes. Pictures are much faster than words in this case:</p>
<p><img title="linearly separable" align="right" style="margin:0 10px" src="/images/Screenshot___01282014___09_39_31_AM.png"></p>
<p>You can see red, and green, and there’s a way to draw a line between them. This means they are linearly separable. The <em>binary</em> part means that the perceptron only functions where there are only two groups.</p>
<h3 id="Why-do-we-care"><a href="#Why-do-we-care" class="headerlink" title="Why do we care?"></a>Why do we care?</h3><p>The problem of classification in machine learning is essentially: </p>
<blockquote>
<p>I have some data, and I’ve gone through and classified it into some groups. When I see some new data, can I automatically figure out the group without going in by hand?</p>
</blockquote>
<p>For example, a hospital information about thousands of heart attack patients, their blood preassure and BMI, and they also have recorded whether or not the person had another heart attack within the next year.</p>
<p>What they want from that is to be able to predict for future patients whether they will have another heart attack in the next year, just based on those two data points. <em>In the real world there would probably be a dozen “features”, not just two</em>.</p>
<h4 id="“Training”-data"><a href="#“Training”-data" class="headerlink" title="“Training” data"></a>“Training” data</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BP  | BMI | Heart Attack?</span><br><span class="line">------------------------</span><br><span class="line">100 | 80  | N</span><br><span class="line">150 | 100 | Y</span><br><span class="line">120 | 90  | N</span><br><span class="line">130 | 60  | N</span><br></pre></td></tr></table></figure>
<p>Then someone comes in with a blood preassure of 125 and a BMI of 105, and we want to know whether he will have another heart attack.</p>
<p><strong>In sum</strong> the perceptron finds a line to divide the two groups (if one exists), and then with future data you just calculate on which side of the line they fall.</p>
<h3 id="The-Math-behind-the-Magic"><a href="#The-Math-behind-the-Magic" class="headerlink" title="The Math behind the Magic"></a>The Math behind the Magic</h3><p>Each “feature” or dimention gets a weight, and these weights essentially indicate how useful the given feature is at differentiating between the two classes. As the perceptron “learns” the training data (the stuff you have that is already classified), it adjusts the weights until it finds the right line.</p>
<p>The line is defined by <code>x1 * w1 + x2 * w2 + ... + xn * wn = 0</code>, where the <code>w</code>s are the weights, and the <code>x</code>s are the features of a given data item.</p>
<p>To train a perceptron, the labeled training data is typically split up into a training set and a test set. That way the classifier can be trained on the training set, and its final accuracy can be evaluated on the test set.</p>
<p><a href="https://en.wikipedia.org/wiki/Perceptron" target="_blank" rel="external">Check out the wikipedia article for more</a></p>
<h2 id="Javascript-Animation"><a href="#Javascript-Animation" class="headerlink" title="Javascript Animation"></a><a href="http://www.khanacademy.org/cs/perceptron-oo/4747053005537280" target="_blank" rel="external">Javascript Animation</a></h2><p>I created this so that I could get a better intuition as to <em>how it really works</em>. It was interesting to see how much the “decision line” moves around - much more than I would have expected. The weights, however, tend to follow a more deterministic course (at least when the set is separable).</p>
<p>Dataset #8 is <em>not</em> linearly separable, so the perceptron will never settle. In my python implementation I was smart about recognizing this, but the javascript animation will just bounce around forever.</p>
<p><a href="https://www.khanacademy.org/cs/perceptron-oo/4747053005537280" target="_blank" rel="external">View in Khan Academy’s environment</a></p>
<script src="http://www.khanacademy.org/cs/perceptron-oo/4747053005537280/embed.js?editor=no&amp;buttons=no&amp;author=no&amp;embed=yes"></script>

<h2 id="Python-implementation"><a href="#Python-implementation" class="headerlink" title="Python implementation"></a>Python implementation</h2><p>The ipython notebook where I came up with these results can be viewed in the ipython notebook viewer <a href="http://nbviewer.ipython.org/gist/jaredly/8630326/Perceptron.ipynb" target="_blank" rel="external">here</a>. The source code is <a href="https://github.com/jaredly/perceptron" target="_blank" rel="external">on github</a>.</p>
<p>The perceptron quit either when it fully classified the training set, or when no progress was made in training set accuracy for 20 epochs.</p>
<h3 id="Voting-Dataset"><a href="#Voting-Dataset" class="headerlink" title="Voting Dataset"></a>Voting Dataset</h3><p>The data here comes from the US 1984 congressional voting records, where there are a number of items on the ballot (yes/no), and then a label “democrat” or “republican”. I discretized ‘yes’ to be 1 and ‘no’ to 0.</p>
<p>Because of the multi-dimentionality of the dataset (16 features) I can’t plot out the actual data points for you, but I did chart the movement of the weights for each of the features:</p>
<p><img src="/images/votinh.png" alt="voting weights"></p>
<p>Here, if a line is above zero, it means (kindof) that “yes” was more associated with democrats, whereas if it’s below zero, “yes” is more associated with republicans. It’s of course more comlicated than that, but that’s the description that is easiest to envision.</p>
<p>I split the data 70-30, where 70% of the data was given to the perceptron to train on, and then 30% was used at the very end to “test” the classifier.</p>
<p>I ran it 5 times with different random splits (always 70-30), and the perceptron averaged 93% accuracy! Which I think is really cool.</p>
<p>Also, from looking at the weights we can get a feeling for where republicans and democrats differ most strongly. For example, congress members who voted “yes” on the “physicial-fee-freeze” bill where very likely republican, whereas those who voted “yes” on the “anti-satellite-test-ban” (whatever that was) where more likely democrat.</p>
<h3 id="Iris-Dataset"><a href="#Iris-Dataset" class="headerlink" title="Iris Dataset"></a>Iris Dataset</h3><p>This dataset involves just 4 measurements on different specimens of three different species of iris. In order to classify this with a perceptron, I actually used 3, and each perceptron only had to distinguish between two of the species. Then at the end, the three perceptrons would “vote” on what they thought it was, and the class with the most votes won.</p>
<p>Here we have graphed the weights of each of the perceptrons.</p>
<p><img src="/images/download.png" alt="perceptron-1"></p>
<p><img src="/images/download__1_.png" alt="perceptron-2"></p>
<p><img src="/images/download__2_.png" alt="perceptron-3"></p>
<p><img src="/images/download__3_.png" alt="accuracy"></p>
<p>As you can see, the first two pairs of flowers are easily distinguishable using those four measurements. After two epochs, both perceptrons are achieving 100% accuracy on the training set.</p>
<p>The last pair, versicolor vs verginica, causes trouble, though. Their characteristics apparently overlap just enough to cause confusion, such that the perceptron is not able to find a hyperplane to separate the two. This is manifest in the results as well; the afterage test-set accuracy from 5 independant runs was 89%.</p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2014/01/29/the-noble-perceptron/#disqus_comments</comments>
    </item>
    
  </channel>
</rss>
