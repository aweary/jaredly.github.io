<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[Jared Forsyth]]></title>
    <link>https://jaredforsyth.com/</link>
    <atom:link href="categories/Programming/rss.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[A blog about web development, programming languages, react, etc.]]></description>
    <pubDate>2017-06-03T18:37:36.000Z</pubDate>
    <generator>http://zespia.tw/hexo/</generator>
    
    <item>
      <title><![CDATA[Visualizing Reactive Streams: Hot and Cold Observables]]></title>
      <link>https://jaredforsyth.com/2015/03/06/visualizing-reactive-streams-hot-and-cold/</link>
      <guid>https://jaredforsyth.com/2015/03/06/visualizing-reactive-streams-hot-and-cold/</guid>
      <pubDate>Fri, 06 Mar 2015 23:21:00 GMT</pubDate>
      <description>
      <![CDATA[<p>Reactive Programming is getting a lot of attention these days, and it promises to reduce frustration, bugs, and greenhouse gas emissions. Unfortunately, there’s a sizeable learning curve involved while you try and get your head to think in streams instead of imperative sequential processes.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>Reactive Programming is getting a lot of attention these days, and it promises to reduce frustration, bugs, and greenhouse gas emissions. Unfortunately, there’s a sizeable learning curve involved while you try and get your head to think in streams instead of imperative sequential processes.</p>
<a id="more"></a>
<blockquote>
<p>In order to greatly ease the mental burden involved, I’ve created a tool that allows you to <strong>visualize the streams</strong> in real time, removing the guesswork. It’s called <a href="https://jaredly.github.io/rxvision" target="_blank" rel="external">RxVision</a> and you should check it out.</p>
</blockquote>
<p>One of the things that caught me by suprise is the difference between <code>hot</code> and <code>cold</code> observables, and how they interact with multiple observers.</p>
<p><strong>In this article, I will:</strong></p>
<ul>
<li><a href="#Learning_Rx_and_Duplicate_Ajax_Calls">give some background &amp; describe the cold-induced bug</a></li>
<li><a href="#Stone_cold">give &amp; explain a trivial example demonstrating this bug</a></li>
<li><a href="#Cold_Multiplication">explain the bug in the larger example</a></li>
<li><a href="#Cleaning_up_with_a_little_heat">show how to fix the bug in the larger example</a></li>
</ul>
<p>All with lots of visuals. Enjoy!</p>
<h2 id="Learning_Rx_and_Duplicate_Ajax_Calls">Learning Rx and Duplicate Ajax Calls</h2><p>My first real experience playing with reactive streams was by means of <a href="https://github.com/staltz" target="_blank" rel="external">@staltz</a>‘s excellent <a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="external">tutorial</a>, in which you build a simple “Who to follow” box, similar to the one on twitter.</p>
<p><img src="/images/pasted-17.png" alt="The who to follow box"></p>
<p>Just to make sure I really understood what was going on, I <a href="https://gist.github.com/jaredly/fee1bd6346ea95144d27" target="_blank" rel="external">rewrote the demo in clojurescript</a>.</p>
<p>Essentially, what the box does is get the <code>users.json</code> list from github (at a random offset), and randomly pick 3 of the 100 in that list to display to you. Clicking <code>x</code> next to one of the users replaces that line with a new user (drawn from the 100). Clicking <code>refresh</code> triggers a request to the <code>users.json</code> api endpoint again, this time with a different offset.</p>
<p>While debugging my clojurescript version, I saw in devtools that when refresh was clicked, there were <strong>3 ajax requests instead of one</strong>. Confused, I searched through the article, and eventually found in the comments section my answer: the issue was <code>hot</code> vs <code>cold</code> observables.</p>
<h2 id="Stone_cold">Stone cold</h2><p>Cold observables essentially replicate themselves for each new observer - and this works <strong>retroactively</strong> up the chain of observables.</p>
<p>For a somewhat trivial example:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = $(<span class="string">'button'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">let</span> clicks = Rx.Observable.fromEvent(btn, <span class="string">'click'</span>)</span><br><span class="line">clicks.subscribe(value =&gt; <span class="built_in">console</span>.log(<span class="string">'clicked!'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> values = clicks.map(() =&gt; <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">2</span>))</span><br><span class="line"><span class="keyword">let</span> less1 = values.map(value =&gt; value - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> times2 = less1.map(value =&gt; value*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">times2.subscribe(value =&gt; <span class="built_in">console</span>.log(<span class="string">'i got a value'</span>, value))</span><br><span class="line">times2.subscribe(value =&gt; <span class="built_in">console</span>.log(<span class="string">'also subscribing'</span>, value))</span><br><span class="line">values.subscribe(value =&gt; <span class="built_in">console</span>.log(<span class="string">'the original was'</span>, value))</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>you can follow along in the <a href="http://jaredly.github.io/rxvision/examples/playground/" target="_blank" rel="external">RxVision playground</a></p>
</blockquote>
<p>You would expect that the two <code>times2</code> subscriptions would return the same number, right? <em>they don’t</em>. Take a look at the flow of values here:</p>
<p><img src="/images/pasted-14.png" alt="one flow for each subscriber"></p>
<p>The “click” event is duplicated <em>four times</em>, once for each subscriber. The first <code>map</code>, which generates a random number, therefore generates <strong>3 different numbers</strong>, one for each subscriber down the chain.</p>
<p>To fix that obvious bug, we have to make the random mapper <code>hot</code>, by adding <code>.share()</code> at the end. Line 5 now looks like:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = clicks.map(() =&gt; <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">2</span>)).share()</span><br></pre></td></tr></table></figure>
<p>This makes our <code>console.log</code>s give the right values, but the flow diagram still shows some duplication:</p>
<p><img src="/images/pasted-15.png" alt="still some duplication."></p>
<p>To fully deduplicate, we need to add <code>.share()</code> to every observable that is observed more than once (in this case, line 2 and line 7).</p>
<p><img src="/images/pasted-18.png" alt="doesn&#39;t that look so much cleaner?"></p>
<p>So how does this play out in a somewhat less trivial example?</p>
<h2 id="Cold_Multiplication">Cold Multiplication</h2><p>To demonstrate the issue, I ran the original demo code under the following user actions:</p>
<ul>
<li>load the page</li>
<li>click <code>x</code> next to the first two people</li>
<li>click <code>refresh</code></li>
<li>click <code>x</code> next to the third person</li>
<li>click <code>refresh again</code></li>
</ul>
<p>This is a screenshot of <a href="https://jaredly.github.io/rxvision" target="_blank" rel="external">RxVision</a> which visualizes the flow of values between streams.</p>
<blockquote>
<p>Here, too you can follow along on <a href="http://jaredly.github.io/rxvision/examples/gh-follow/" target="_blank" rel="external">the demo page I made</a>. The code there represents the fully deduplicated version.</p>
</blockquote>
<p><img src="/images/pasted-7.png" alt="Original code - lots of duplicate events"></p>
<blockquote>
<p>Each light gray block represents an “async group” – e.g., all of the events happened within a single tick of the js event loop.</p>
</blockquote>
<p>There are lots of things going on here, so let’s dissect it:</p>
<ul>
<li>those blue <code>create</code> streams each represent an individual Ajax request. Within the first tick, 3 requests get fired off. You can see the <code>startWith</code> observable that initiates this pushes out the same value 3 times – this is definitely a <code>hot</code> vs <code>cold</code> problem.</li>
<li>the refresh button click (the very top stream) fires off <strong>6 times</strong> when it is clicked once. Three of those times are to clear each UI list item, and then 3 other times for our duplicated ajax calls.</li>
</ul>
<h2 id="Cleaning_up_with_a_little_heat">Cleaning up with a little heat</h2><p>As with the first example, the way to fix duplication is the <code>.share()</code> method of an observable. To stop the duplicate requesting, we just <code>.share()</code> the <code>responseStream</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> responseStream = requestStream.flatMap(ajaxGet).share();</span><br></pre></td></tr></table></figure>
<p>That was easy. Now it looks like this:</p>
<p><img src="/images/pasted-6.png" alt="Ajax deduped, but click handler still going crazy"></p>
<p>Note that there are now only 3 ajax requests (the <code>create</code> streams), one for the initial and two more for the times we clicked <code>refresh</code>. However, the refresh button click handler is still duplicating, so we need to <code>share()</code> that too:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> refreshClickStream = Rx.Observable.fromEvent(refreshButton, <span class="string">'click'</span>).share();</span><br></pre></td></tr></table></figure>
<p>The data flow chart now looks much cleaner, and duplication has been eliminated.<br><img src="/images/pasted-16.png" alt="Order has been restored"></p>
<h2 id="What_have_we_learned?">What have we learned?</h2><ul>
<li>It’s easier to debug something you can look at.</li>
<li>Whenever an observable is subscribed to more than once, make it hot with <code>.share()</code> to make all subscribers see the same thing.</li>
</ul>
<p>Thanks for your time, and if you check out <a href="https://jaredly.github.io/rxvision" target="_blank" rel="external">RxVision</a>, let me know what you think!</p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2015/03/06/visualizing-reactive-streams-hot-and-cold/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[The Hexo static blogging engine gets an admin UI]]></title>
      <link>https://jaredforsyth.com/2014/07/26/the-hexo-static-blogging-engine-gets-an-admin-ui/</link>
      <guid>https://jaredforsyth.com/2014/07/26/the-hexo-static-blogging-engine-gets-an-admin-ui/</guid>
      <pubDate>Sun, 27 Jul 2014 05:21:00 GMT</pubDate>
      <description>
      <![CDATA[<p>I <a href="/2014/07/26/switching-from-ghost-to-hexo/">recently switched</a> from <a href="http://ghost.org">ghost</a> to <a href="http://hexo.io">hexo</a>, and the biggest thing missing for me was the editor interface. So I made one. Currently, it’s mostly a clone of the Ghost interface, but I have some ideas for making it even more awesome.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>I <a href="/2014/07/26/switching-from-ghost-to-hexo/">recently switched</a> from <a href="http://ghost.org" target="_blank" rel="external">ghost</a> to <a href="http://hexo.io" target="_blank" rel="external">hexo</a>, and the biggest thing missing for me was the editor interface. So I made one. Currently, it’s mostly a clone of the Ghost interface, but I have some ideas for making it even more awesome.</p>
<a id="more"></a>
<p>Get the <a href="https://github.com/jaredly/hexo-admin-plugin" target="_blank" rel="external">source code</a>, or <code>npm install --save hexo-admin-plugin</code> to get this goodness for your hexo blog. <strong>Note:</strong> There is no security, so don’t use this plugin on a public-facing server. Access @ <a href="http://localhost:4000/admin/" target="_blank" rel="external">http://localhost:4000/admin/</a></p>
<p>I’ve also put together an <strong><a href="http://jaredly.github.io/hexo-admin/admin/" target="_blank" rel="external">online demo</a></strong> that’s not connected to a backend - most operations should work, but nothing persists.</p>
<p><strong><a href="http://jaredly.github.io/hexo-admin/" target="_blank" rel="external">Instructions &amp; Quickstart</a></strong> on the website.</p>
<h4 id="Posts_overview">Posts overview</h4><p><a href="http://jaredly.github.io/hexo-admin/" target="_blank" rel="external"><img src="/images/pasted-0.png" alt="posts view"></a></p>
<h4 id="Editor_view">Editor view</h4><p><a href="http://jaredly.github.io/hexo-admin/" target="_blank" rel="external"><img src="/images/pasted-1.png" alt="editor view"></a></p>
<p><strong>Features:</strong></p>
<ul>
<li>side-by-side markdown editing</li>
<li>auto-save posts</li>
<li>paste to insert an image</li>
<li>publish/unpublish</li>
</ul>
<p><strong>Missing features (which you can still do just fine w/ the raw files):</strong></p>
<ul>
<li>edit categories &amp; tags</li>
<li>edit publish date/time</li>
<li>edit slug</li>
</ul>
<p><strong>Future awesome:</strong></p>
<ul>
<li>drag &amp; drop to insert a picture or file</li>
<li>autocomplete for linking to other posts</li>
<li>git commit from the UI?</li>
</ul>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2014/07/26/the-hexo-static-blogging-engine-gets-an-admin-ui/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Rust vs Go]]></title>
      <link>https://jaredforsyth.com/2014/03/22/rust-vs-go/</link>
      <guid>https://jaredforsyth.com/2014/03/22/rust-vs-go/</guid>
      <pubDate>Sat, 22 Mar 2014 21:57:00 GMT</pubDate>
      <description>
      <![CDATA[<p>Go and Rust seem like natural competitors. They are both trying the role of a C-like low-level language with modern affordances, safety, and nice, clean concurrency. And they’re each backed by a major player in the browser race - go by Google, rust by Mozilla.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>Go and Rust seem like natural competitors. They are both trying the role of a C-like low-level language with modern affordances, safety, and nice, clean concurrency. And they’re each backed by a major player in the browser race - go by Google, rust by Mozilla.</p>
<a id="more"></a>
<p>I’ve made a few things in <a href="http://golang.org" target="_blank" rel="external">go</a>, and I made <a href="https://github.com/jaredly/rusty-automata" target="_blank" rel="external">my first (non-trivial) program</a> in <a href="http://rust-lang.org" target="_blank" rel="external">rust</a> this past week, which was a port of <a href="https://github.com/jaredly/rocks" target="_blank" rel="external">a program I wrote in go</a> a few months before. There are many differences between rust and go that I haven’t included here because they haven’t effected me yet.</p>
<h2 id="Where_Go_Wins">Where Go Wins</h2><h3 id="Stability">Stability</h3><p>Go 1.0 was released 2 years ago, along with some guarantees about backwards compatability going forward. Because of this stability, a community has been able to grow around it, with lots of packages, examples, and tutorials available.</p>
<p>Rust just released 0.9 in Janurary, which had a number of breaking syntax, type system, and std library changes from 0.8. The roadmap to 1.0 looks like there will be several more breaking changes of various natures as the team nails down how they want the library to behave. As a result of this volatility, many community modules and tutorials are hopelessly out of date, making it more difficult for a community to form.</p>
<h3 id="Community">Community</h3><p>Go has a very active community, a growing number of community modules, and lots of tutorials and examples out there to get you started. There are also some high-profile projects using Go (like Docker), and a number of startups and consulting companies that are all about Go. The go runtime comes with a package manager built in (<code>go get</code>) that makes dependency management simple.</p>
<p>Rust’s community, on the other hand, suffers from the volatility described above. Additionally, the Rust package manager was just deprecated, so there is currently no supported solution for package management – you have to clone and install dependencies by hand or with custom makefiles. Fortunately, this will change in the near future; Yehuda Katz and Carl Lerche, who built Ruby’s  “Bundler”, <a href="https://mail.mozilla.org/pipermail/rust-dev/2014-March/009090.html" target="_blank" rel="external">have been recruited</a> to make an awesome package manager “Cargo” for Rust.</p>
<h3 id="Standard_Library">Standard Library</h3><p>Go has a <a href="http://static.rust-lang.org/doc/master/std/index.html" target="_blank" rel="external">really solid standard library</a>, making everything from image en/decoding to building a web server to cryptography simple and straightforward.</p>
<p>Rust’s <a href="http://static.rust-lang.org/doc/master/std/index.html" target="_blank" rel="external">standard library</a> leaves a lot to be desired. Again, this can be blamed on the general immaturity of the language (it would be a pain to rewrite a huge std library every time the syntax changes).</p>
<h2 id="Where_Rust_Wins">Where Rust Wins</h2><h3 id="The_Type_System">The Type System</h3><p>Go did some neat things with their type system, like the duck-typing traits and lots of great inference, but nothing that really broke the mold – it felt like C, minus much of the headache.</p>
<p>One thing that Go doesn’t have is generics. This is an oft-requested feature in the mailing list, but the response from the core team is “we don’t think it’s that important.” Rust has generics.</p>
<p>Rust’s type system is really breaking the mold in ways that I find really exciting.</p>
<ul>
<li>mutability, not just of data variables but also of pointers, must be declared explicitly</li>
<li><p>there are 3 types of pointers:</p>
<ul>
<li>Managed pointers are reference counted by a thread-local GC. </li>
<li>Owned pointers are allocated and freed <em>automatically by the compiler</em>. </li>
<li>Borrowed pointers “borrow” the reference from an owned pointer, with the type-system-enforced promise that they won’t to anything to let the reference escape.</li>
</ul>
</li>
</ul>
<p>I won’t try to fully explain the type system here; because it’s so much more powerful than many of us procedural folks are used to, it can take some time to wrap your head around it. <strong>Don’t be discouraged</strong>, though. It’s really awesome once you get to know it.<br>In sum, the type system allows the compiler to make some really neat guarentees about safety and parallelizability. And did I mention the <strong>automatic malloc &amp; free</strong>? No segfaults. It’s like GC (easy) but without the expense (pausing, reference counting, etc.)!</p>
<h3 id="Memory_Management">Memory Management</h3><p>In Go, anything that’s not on the stack is garbage collected. If you want more control, you have to resort to unsafe code.</p>
<p>Rust has GC if you want it, but the type system’s automatic manual memory management is so poweful that reference counted pointers are rarely needed.</p>
<h3 id="Functional_Affordances">Functional Affordances</h3><p>There are a number of things in Rust that are inspired by functional programming languages. </p>
<h5 id="Everything_is_an_expression">Everything is an expression</h5><p>You can, for example, assign the result of an if/else block to a variable.</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="keyword">if</span> something &#123;</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  calculateX()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="Variable_destructuring">Variable destructuring</h5><p>This example might not be terribly comprehensible if you’ve never seen rust before. Trust me it’s cool :)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">struct</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>; <span class="comment">// this is a named tuple type</span></span><br><span class="line">let p1 = Point(<span class="number">23</span>, <span class="number">24</span>);</span><br><span class="line"><span class="function">let <span class="title">Point</span><span class="params">(x, y)</span> </span>= p1;</span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">20</span> &amp;&amp; y &lt; <span class="number">10</span> &#123;</span><br><span class="line">  <span class="comment">// etc.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="Match_expressions">Match expressions</h5><p>These are amazingly useful. It’s like a switch on steroids.</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title">Shape</span> &#123;</span><br><span class="line">  Circle(Point, <span class="keyword">f64</span>),</span><br><span class="line">  Rectangle(Point, Point)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(sh: Shape) -&gt; <span class="keyword">f64</span> &#123;</span><br><span class="line">  <span class="keyword">match</span> sh &#123;</span><br><span class="line">    <span class="comment">// special case: if the radius </span></span><br><span class="line">    <span class="comment">// is less than 10, return the product of x and y</span></span><br><span class="line">    Circle(Point&#123;x, y&#125;, r) <span class="keyword">if</span> r &lt; <span class="number">10</span> =&gt; x * y,</span><br><span class="line">    Circle(_, radius) =&gt; PI * radius * radius,</span><br><span class="line">    Rectangle(Point&#123;x, y&#125;, Point&#123;x: x2, y: y2&#125;) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> a = (x2 - x) * (y2 - y);</span><br><span class="line">      <span class="keyword">if</span> a &lt; <span class="number">0</span> &#123; -a &#125; <span class="keyword">else</span> &#123; a &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can also <code>match</code> on lists.</p>
<h2 id="Conclusion">Conclusion</h2><p><strong>I’m betting on Rust.</strong> Not that this has to be a competition; both languages might well grow to maturity and achieve popularity. However, it does seem that they are both trying to fill a similar role; a C-like low-level language with modern affordances, safety, and nice, clean concurrency.</p>
<p>From my experience, the places that Go wins are less to do with intrinsic language features and more due to its first-mover advantage. Of course, a language that no one speaks is dead, so I’m not going to say community doesn’t matter. I just think that once Rust settles down and matures a bit its superior design will shine through and it will become really popular.</p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2014/03/22/rust-vs-go/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[First Impressions of Rust]]></title>
      <link>https://jaredforsyth.com/2014/03/20/first-impressions-of-rust/</link>
      <guid>https://jaredforsyth.com/2014/03/20/first-impressions-of-rust/</guid>
      <pubDate>Thu, 20 Mar 2014 22:04:00 GMT</pubDate>
      <description>
      <![CDATA[<p>A while ago, I made a cellular automata simulator in Go, inspired by <a href="https://www.youtube.com/watch?v=M4cV0nCIZoc">this video</a> about a “rock, paper, scissors” simulation, where there are three “species” of cells which consume each other. <!-- Here's [a post about that](). --></p>
<p>Last week I rewrote this in Rust]]>
      
      </description>
      <content:encoded><![CDATA[<p>A while ago, I made a cellular automata simulator in Go, inspired by <a href="https://www.youtube.com/watch?v=M4cV0nCIZoc" target="_blank" rel="external">this video</a> about a “rock, paper, scissors” simulation, where there are three “species” of cells which consume each other. <!-- Here's [a post about that](). --></p>
<p>Last week I rewrote this in Rust<a id="more"></a>, with a number of modifications. There are now four colors, which make the system far more stable, resulting in a much more pleasing simulation (imo).</p>
<p>Here’s the result:</p>
<div class="video-container"><iframe src="//www.youtube.com/embed/lNFOnomruqk" frameborder="0" allowfullscreen></iframe></div>
<p><br></p>
<h3 id="Things_that_worked_well">Things that worked well</h3><ul>
<li>I <em>really</em> like the <code>match</code> construct</li>
<li>everything is an expression</li>
<li>I like the module system, the syntax, etc. Feels comfortable</li>
<li>the compiler is very helpful, telling you what you did wrong and what you should probably do to fix it</li>
<li>runtime exceptions are reported well</li>
<li>the type system, once I understood it, is <em>amazing</em>. There’s a ton of potential there</li>
</ul>
<h3 id="Things_that_didn’t_work_as_well">Things that didn’t work as well</h3><ul>
<li>the macro system wasn’t quite powerful enough to do the things I wanted :( but it’s still cool</li>
<li>compilation process isn’t blazing fast, but it’s not too bad</li>
<li>parallelism is currently limited to message passing, whereas I really wanted fork/join functionality for processing the arrays. That should be fixed soon</li>
<li>the language is still higly volatile; breaking syntax changes happen all the time, which means that many libraries on github are broken</li>
<li>it took a fair amount of experimentation before I understood the type system enough to make things happen. owner vs borrowed pointers, etc.</li>
<li>there’s no solution for package management. This should be fixed soon as well</li>
</ul>
<h3 id="Conclusion">Conclusion</h3><p>Rust is very promising, but to volatile for real work just yet. Once the syntax stabilizes, the standard library is fleshed out, and the community develops, I think it will be incredibly useful.</p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2014/03/20/first-impressions-of-rust/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Photon Ray Tracing]]></title>
      <link>https://jaredforsyth.com/2014/01/20/photon-ray-tracing/</link>
      <guid>https://jaredforsyth.com/2014/01/20/photon-ray-tracing/</guid>
      <pubDate>Mon, 20 Jan 2014 22:36:03 GMT</pubDate>
      <description>
      <![CDATA[<p>A few months ago I saw @scanlime’s “Zen Photon Garden” on hacker news, and was really impressed. In short, you draw walls/mirrors with your mouse, and it ray-traces light from a central source. Very beautiful and “zen”. However, as a programmer, drawing lines by hand was far too inaccurate. So I forked it and added a scriptable interface for adding walls.</p>]]>
      
      </description>
      <content:encoded><![CDATA[<p>A few months ago I saw @scanlime’s “Zen Photon Garden” on hacker news, and was really impressed. In short, you draw walls/mirrors with your mouse, and it ray-traces light from a central source. Very beautiful and “zen”. However, as a programmer, drawing lines by hand was far too inaccurate. So I forked it and added a scriptable interface for adding walls.</p>
<a id="more"></a>
<p>Here are some of the designs I came up with:</p>
<p><img src="/images/gallery.png" alt="example"></p>
<p>But don’t take my word for it; <a href="http://jaredly.github.io/zenphoton/html/" target="_blank" rel="external">play with it yourself</a>.</p>
<p>And here’s a screenshot of the full UI</p>
<p><img src="/images/Selection_048.png" alt="screenshot"></p>
<h3 id="Things_I_still_want_to_do">Things I still want to do</h3><ul>
<li>clean up the UI a bit more</li>
<li>use Ace editor instead of a textarea for the code</li>
<li>allow you to reference github gists for the code &amp; config</li>
<li>the config sliders don’t reload when you change the json</li>
<li>I’d actually like to dump coffeescript, maybe rewrite the thing in React</li>
</ul>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2014/01/20/photon-ray-tracing/#disqus_comments</comments>
    </item>
    
  </channel>
</rss>
