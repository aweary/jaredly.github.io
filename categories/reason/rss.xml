<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[Jared Forsyth]]></title>
    <link>https://jaredforsyth.com/</link>
    <atom:link href="categories/reason/rss.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[A blog about web development, programming languages, react, etc.]]></description>
    <pubDate>2017-06-24T04:58:28.000Z</pubDate>
    <generator>http://zespia.tw/hexo/</generator>
    
    <item>
      <title><![CDATA[When will ReasonML be ready?]]></title>
      <link>https://jaredforsyth.com/2017/06/23/when-will-reasonml-be-ready/</link>
      <guid>https://jaredforsyth.com/2017/06/23/when-will-reasonml-be-ready/</guid>
      <pubDate>Sat, 24 Jun 2017 04:36:00 GMT</pubDate>
      <description>
      <![CDATA[Reason is super exciting and also very new -- there's lots to be done before it's stable.]]>
      
      </description>
      <content:encoded><![CDATA[<p>Someone came into our <a href="https://discord.gg/reasonml" target="_blank" rel="external">discord channel</a> a few days ago asking “Is Reason suitable for migrating a large production JavaScript codebase incrementally?” I answered “Yes, but wait 6 months.”</p>
<p>What’s the current status? At the moment, we’re mostly in the realm of “enthusiasts who are OK with being on the bleeding edge, and want to help build out the foundation in their spare time.”</p>
<a id="more"></a>
<blockquote>
<p>Btw if this sounds like you, we’ll provide you with the support you need! Our <a href="https://discord.gg/reasonml" target="_blank" rel="external">discord channel</a> is very friendly and helpful 😀</p>
</blockquote>
<p>I’ve gotten really excited about Reason recently because I think it has the potential to be the best language + ecosystem I’ve worked in, and that it has a real shot at gaining wide adoption. However, I’d like to set some expectations first to avoid potential disappointment/disillusionment as people come up against its rough edges (I know of one person who snuck some reason code into their codebase at work and their coworkers were none too happy when they found out).</p>
<p><img src="/images/reason_stability.png" alt=""></p>
<p>The end goal, as <a href="https://twitter.com/jordwalke" target="_blank" rel="external">Jordan</a> puts it, is to be able to use this great language at our day jobs, instead of just on the weekends as a respite from our day jobs.</p>
<blockquote>
<p>It’s also worth noting that Reason is more than just a couple of developers hacking around in their spare time. Facebook is using it to power substantial portions of messenger.com and other products – they’re definitely invested in its future.</p>
</blockquote>
<h2 id="What-needs-work"><a href="#What-needs-work" class="headerlink" title="What needs work?"></a>What needs work?</h2><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p>The Reason syntax is up for some <a href="https://github.com/facebook/reason/pull/1299" target="_blank" rel="external">big changes</a> in the near future. Fortunately, we have <code>refmt</code> which will be able to auto-upgrade all of your code to the new style. However, you won’t want to train a large team on the current syntax only to relearn it in a few months.</p>
<h3 id="Build-system"><a href="#Build-system" class="headerlink" title="Build system"></a>Build system</h3><p>What we have now is a ton better than what we had 6 months ago, but it’s still far from polished. I’m guessing that in 3-6 months we’ll have most of the kinks ironed out.</p>
<h3 id="JavaScript-ecosystem"><a href="#JavaScript-ecosystem" class="headerlink" title="JavaScript ecosystem"></a>JavaScript ecosystem</h3><p>There are hardly any Reason libraries out there, and what is there is super new and far from stable. We do have the benefit of being able to use all of <code>npm</code> though - you just have to write the type definitions and you’re good to go.</p>
<h3 id="Native-ecosystem"><a href="#Native-ecosystem" class="headerlink" title="Native ecosystem"></a>Native ecosystem</h3><p>The OCaml community has some pretty fundamental fragmentations (there are three incompatible versions of the standard library, two incompatible ways to handle async), and documentation is generally pretty sparse. We’re hoping to establish good “batteries included” standard library (that will work for both js and native), but it will take some time.</p>
<h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h3><p><a href="https://realworldocaml.org/" target="_blank" rel="external">Real World OCaml</a> is the best and nearly the only resource out there for getting started. The OCaml core documentation can be really hard to get into, and is really lacking in examples. There are a couple of efforts at creating some beginner-friendly documentation for Reason, but there’s lots to do!</p>
<h3 id="IDE-Integration"><a href="#IDE-Integration" class="headerlink" title="IDE Integration"></a>IDE Integration</h3><p>There are some really nice plugins to get type hinting, syntax highlighting, refactoring &amp; more in VSCode, Atom, Vim, etc. Unfortunatly, they can be pretty finnicky to set up - lots more work needs to be done to make the install &amp; setup process bullet proof.</p>
<h3 id="Community"><a href="#Community" class="headerlink" title="Community"></a>Community</h3><p>The community is pretty small, but very enthusiastic! If you show up in our <a href="https://discord.gg/reasonml" target="_blank" rel="external">discord channel</a> with a question, you’ll find lots of helpful people who are happy to answer it. <a href="https://stackoverflow.com/questions/tagged/reason" target="_blank" rel="external">StackOverflow</a> doesn’t have very many Questions &amp; Answers for you to browse through (there are 14 as of this writing), and googling an error you come across might not get you anywhere, but if you ask a question on SO you’ll get a good answer – especially if you ping us on discord 🙂.</p>
<h2 id="So-what-now"><a href="#So-what-now" class="headerlink" title="So what now?"></a>So what now?</h2><p>Despite the rough edges, I find Reason really delightful to write compared to the languages I use at work (JavaScript/Flow, Java, ObjC, Swift), and it’s even helped me think of solutions to problems I’ve faced at work.</p>
<p>If you’re excited &amp; have the free time, please jump in! And if you want to document your progress (write tutorials or documentation about what you’re learning), all the better!</p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2017/06/23/when-will-reasonml-be-ready/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Template-based macros in Reason/OCaml]]></title>
      <link>https://jaredforsyth.com/2017/06/20/template-based-macros-for-reason-ocaml/</link>
      <guid>https://jaredforsyth.com/2017/06/20/template-based-macros-for-reason-ocaml/</guid>
      <pubDate>Wed, 21 Jun 2017 02:00:35 GMT</pubDate>
      <description>
      <![CDATA[Thoughts about a friendlier macro system.]]>
      
      </description>
      <content:encoded><![CDATA[<p>A couple of people have shown up in <a href="https://discord.gg/reasonml" target="_blank" rel="external">the discord channel</a> asking whether Reason has macros, and the answer is “sort of.” I think we can do better.</p>
<a id="more"></a>
<p>OCaml has a feature called “syntax extensions”, which are well-defined syntax structures that are there specifically for some plugin to take &amp; transform into something else. The plugin that you include (referred to as a <code>ppx</code>), then is passed the whole AST of your file, and it can do anything it wants to it. In general, it will look for these syntax extensions that it knows how to process, and limit transformations to just those nodes.</p>
<p>The best explanation of syntax extensions is from whitequark, and has a big “this is out of date” disclaimer at the top 😅 <a href="https://whitequark.org/blog/2014/04/16/a-guide-to-extension-points-in-ocaml/" target="_blank" rel="external">https://whitequark.org/blog/2014/04/16/a-guide-to-extension-points-in-ocaml/</a>.</p>
<h2 id="Why-do-we-need-anything-else"><a href="#Why-do-we-need-anything-else" class="headerlink" title="Why do we need anything else?"></a>Why do we need anything else?</h2><p>I was looking at the source of <a href="https://github.com/poeschko/bs-glamor" target="_blank" rel="external">bs-glamor</a>, which is a wrapper around the css-in-js library <a href="https://github.com/threepointone/glamor" target="_blank" rel="external">glamor</a>, and came across a familiar pattern – <a href="https://github.com/poeschko/bs-glamor/blob/master/src/glamor.re" target="_blank" rel="external">tons of boilerplate</a>.</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> azimouth v =&gt; Property <span class="string">"azimouth"</span> v;</div><div class="line"><span class="keyword">let</span> background v =&gt; Property <span class="string">"background"</span> v;</div><div class="line"><span class="keyword">let</span> backgroundAttachment v =&gt; Property <span class="string">"backgroundAttachment"</span> v;</div><div class="line"><span class="comment">/* repeat for like 100 more properties */</span></div></pre></td></tr></table></figure>
<p>If this were javascript, we’d be able to just do</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> properties = [<span class="string">'azimouth'</span>, <span class="string">'background'</span>, <span class="comment">/* etc */</span>];</div><div class="line"><span class="keyword">let</span> helpers = &#123;&#125;;</div><div class="line">properties.forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</div><div class="line">  helpers[name] = <span class="function"><span class="params">v</span> =&gt;</span> <span class="keyword">new</span> Property(name, v)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>But this isn’t JavaScript, and you can’t dynamically create function names. Function names (and the types &amp; shape of modules) need to be known at compile time.</p>
<p>You could imagine a <code>ppx</code> that goes through and looks for syntax like this, and does the appropriate transformation:</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[%%make_properties [</div><div class="line">  <span class="string">"azimouth"</span>,</div><div class="line">  <span class="string">"background"</span>,</div><div class="line">  <span class="comment">/* etc */</span></div><div class="line">]]</div></pre></td></tr></table></figure>
<p>But <code>ppx</code>s take a fair bit of setting up, and it wouldn’t really feel worth it to go through and make one just to save you some typing. Might as well just use “multi-cursor mode” in your favorite editor and type it all out, and hope that you never have to change all of the declarations in the future.</p>
<h2 id="An-idea-from-Rust"><a href="#An-idea-from-Rust" class="headerlink" title="An idea from Rust"></a>An idea from Rust</h2><p>But there’s got to be a better way! Rust has a cool macro system that’s designed precisely for this kind of problem.</p>
<p>The best part is that you don’t have to know much about the Rust internal AST format, because this macro definition is template-based. Here’s an example from <a href="http://words.steveklabnik.com/an-overview-of-macros-in-rust" target="_blank" rel="external">this excellent post</a>:</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">macro_rules!</span> vec &#123;</div><div class="line">    ( $( $x:expr ),* ) =&gt; &#123;</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> temp_vec = <span class="built_in">Vec</span>::new();</div><div class="line">            $(</div><div class="line">                temp_vec.push($x);</div><div class="line">            )* <span class="comment">// this means "repeat for each value of x"</span></div><div class="line">            temp_vec</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Then you can do <code>vec!(1, 2, 3)</code> and it will be transformed into code that creates a vector and pushes into it.</p>
<h2 id="Taking-that-to-Reason-OCaml"><a href="#Taking-that-to-Reason-OCaml" class="headerlink" title="Taking that to Reason/OCaml"></a>Taking that to Reason/OCaml</h2><blockquote>
<p>This rest of this post might be fairly unintelligible if you aren’t familiar with OCaml, syntax extensions, and ppxs. Sorry!</p>
</blockquote>
<p>I could imagine a <code>template_macros</code> ppx that lets you do this (I’m keeping the application parallel to rust, even though we already have list &amp; array literals):</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* at the top level */</span></div><div class="line">[@@@let_macro.vec(items: list expr);</div><div class="line">  <span class="keyword">let</span> temp_vec = <span class="built_in">Vec</span>.new ();</div><div class="line">  [%<span class="keyword">loop</span>(items, item);</div><div class="line">    vec_push temp_vec [%expr item];</div><div class="line">  ];</div><div class="line">  temp_vec;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="comment">/* somewhere in a function */</span></div><div class="line">[%vec [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</div></pre></td></tr></table></figure>
<p>So how would this apply to our boilerplate earler?</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[@@@let_macro.make_properties(names: list string);</div><div class="line">  [%%<span class="keyword">loop</span>(names, name);</div><div class="line">    <span class="comment">/* all bound variables (such as `name`) can be used as</span></div><div class="line">     * identifiers, and will be substituted. If the content</div><div class="line">     * of the bound value is not an identifier</div><div class="line">     * or a string, then an error is thrown.</div><div class="line">     */</div><div class="line">    <span class="keyword">let</span> name v =&gt; Property [%string name] v;</div><div class="line">    <span class="comment">/* results in `let color v =&gt; Property "color" v;` */</span></div><div class="line">  ];</div><div class="line">];</div></pre></td></tr></table></figure>
<p>And then we can use it the way we want to!</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[%%make_properties [</div><div class="line">  <span class="string">"azimouth"</span>,</div><div class="line">  <span class="string">"background"</span>,</div><div class="line">  <span class="comment">/* etc */</span></div><div class="line">]];</div></pre></td></tr></table></figure>
<h2 id="Another-example"><a href="#Another-example" class="headerlink" title="Another example"></a>Another example</h2><p>What if we wanted to generate functors as well? It might look something like this:</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[@@@let_macro.glamorous_factory(node_types: list (Ident, string));</div><div class="line">  [%%<span class="keyword">loop</span>(divs, (FunctorName, text));</div><div class="line">    <span class="keyword">let</span> module FunctorName (Config: GlamorousConfig) =&gt; GlamorousFactory &#123;</div><div class="line">      <span class="keyword">let</span> elementName = [%string text];</div><div class="line">    &#125; Config;</div><div class="line">  ]</div><div class="line">];</div><div class="line"></div><div class="line">[%%glamorous_factory [</div><div class="line">  (Div, <span class="string">"div"</span>),</div><div class="line">  (List, <span class="string">"list"</span>),</div><div class="line">  (Awesome, <span class="string">"awesome"</span>)</div><div class="line">]];</div></pre></td></tr></table></figure>
<h2 id="Some-weeds"><a href="#Some-weeds" class="headerlink" title="Some weeds"></a>Some weeds</h2><p>We can’t do the <code>regex</code>-type thing that rust does, because OCaml extension points have to contain syntactically valid ASTs. My thought for the “macro arguments” specification would be</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">macro_definition= [@@@let_macro.&lt;macro_name&gt;(&lt;macro_argument&gt;(, &lt;macro_argument&gt;)*));</div><div class="line">  &lt;macro_body&gt;</div><div class="line">]</div><div class="line"></div><div class="line">macro_name= identifier</div><div class="line"></div><div class="line">macro_argument= identifier: &lt;argument_type&gt;</div><div class="line"></div><div class="line">argument_type=</div><div class="line">  | string</div><div class="line">  | int</div><div class="line">  | expr</div><div class="line">  | ident</div><div class="line">  | structure</div><div class="line">  | type</div><div class="line">  | list &lt;argument_type&gt;</div><div class="line">  | '('&lt;argument_type&gt;(',' &lt;argument_type&gt;)+')'; /* a tuple literal */</div></pre></td></tr></table></figure>
<p>And then <code>macro_body</code> would allow subsitutions of the form</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[%string arg_name] <span class="comment">/* a string literal -- will convert an identifier if given */</span></div><div class="line">[%expr arg_name] <span class="comment">/* drop in as an expression */</span></div><div class="line">[%<span class="class"><span class="keyword">type</span> <span class="title">arg_name</span></span>] <span class="comment">/* drop in as a type */</span></div><div class="line">[%<span class="keyword">loop</span>(&lt;list_arg&gt;, &lt;bound_name&gt;);</div><div class="line">  &lt;loop_body&gt;</div><div class="line">]</div><div class="line">[%range(&lt;start_int_or_arg_name&gt;, &lt;end_...&gt;, &lt;bound_name&gt;);</div><div class="line">]</div><div class="line">[@@@gensym(&lt;bound_name&gt;)]; <span class="comment">/* create an identifier that's guaranteed not to conflict */</span></div><div class="line">[@@@ident(&lt;bound_name&gt;, &lt;string_concat&gt;)]; <span class="keyword">where</span> &lt;string_concat&gt; is like `<span class="string">"something_"</span> ^ vbl_name`</div></pre></td></tr></table></figure>
<p>And when invoking, the corresponding arguments would look like:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">invocation= [%%macro_name(&lt;arg_literal&gt;(, &lt;arg_literal&gt;)*)];</div><div class="line">string= "a literal string"</div><div class="line">int= 23</div><div class="line">expr= /* any expression literal */</div><div class="line">ident= an_ident</div><div class="line">structure= [%structure /* now we can put any structure items in here */]</div><div class="line">type= [%type: /* now this is a type */]</div><div class="line">list int= [1, 2, 3]</div><div class="line">(int, int)= (1, 2) /* for the tuple literal */</div></pre></td></tr></table></figure>
<p>We’d also need some distinction between “structure item” macros and “expression” macros I imagine. Would we want to make “signature” macros? I dunno.</p>
<h2 id="Comparison-to-existing-solutions"><a href="#Comparison-to-existing-solutions" class="headerlink" title="Comparison to existing solutions"></a>Comparison to existing solutions</h2><p>.</p>
<h3 id="CPPO"><a href="#CPPO" class="headerlink" title="CPPO"></a><a href="https://github.com/mjambon/cppo" target="_blank" rel="external">CPPO</a></h3><p>CPPO is for c-style “use this code if we’re targetting iOS 9.2, use thise other code if we’re targetting windows”. Which is quite different from eliminating boilerplate.</p>
<h3 id="Cinaps"><a href="#Cinaps" class="headerlink" title="Cinaps"></a><a href="https://github.com/janestreet/cinaps" target="_blank" rel="external">Cinaps</a></h3><p>Cinaps is similar in goal, but quite different in design. Both are targetted at fixing boilerplate with something that’s much less work than creating a ppx</p>
<p>Cinaps tackles the “make sure the code doesn’t get too confusing” problem by actually writing the resulting code to disk, and that’s the code you commit. Template-based macros tackle the problem by limiting the power of the tool – you can’t do arbitrary transformations; you can only use templates, which (theoretically) make it pretty easy to understand what the output would be. I’d also want a cli (or IDE) tool where you enter a file name &amp; it shows you the transformed output. (For that matter, I’d love that for all ppxs).</p>
<h3 id="ppx-deriving"><a href="#ppx-deriving" class="headerlink" title="ppx_deriving"></a>ppx_deriving</h3><p>Making a ppx_deriving plugin is somewhat simpler than a full blown ppx, but it’s still complex enough that you’d only go to the trouble if you had a generalized pattern that you use a ton. Template-based macros are for one-offs.</p>
<h2 id="What-do-you-think"><a href="#What-do-you-think" class="headerlink" title="What do you think?"></a>What do you think?</h2><p>Let me know on <a href="https://discord.gg/reasonml" target="_blank" rel="external">discord</a> @jaredly or twitter <a href="https://twitter.com/jaredforsyth" target="_blank" rel="external">@jaredforsyth</a></p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2017/06/20/template-based-macros-for-reason-ocaml/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Your first native Reason/OCaml project]]></title>
      <link>https://jaredforsyth.com/2017/06/17/your-first-native-reason-ocaml-project/</link>
      <guid>https://jaredforsyth.com/2017/06/17/your-first-native-reason-ocaml-project/</guid>
      <pubDate>Sun, 18 Jun 2017 01:15:00 GMT</pubDate>
      <description>
      <![CDATA[A quick tutorial where we build a simple cli program]]>
      
      </description>
      <content:encoded><![CDATA[<p>I just wrote my first Reason project that compiled to native, and you can too! Luckily for you, my first native project was a cli tool to help people get started with native Reason development 🙌.</p>
<a id="more"></a>
<blockquote>
<p>If you’re more interested in targeting JavaScript, I wrote <a href="http://jaredforsyth.com/2017/06/03/getting-started-with-reason-and-bucklescript/">two</a> <a href="http://jaredforsyth.com/2017/06/03/javascript-interop-with-reason-and-bucklescript/">tutorials</a> about that to get you started.</p>
</blockquote>
<p>What will we be doing?</p>
<ul>
<li>project setup</li>
<li>building &amp; running</li>
<li>parsing cli arguments</li>
</ul>
<h2 id="Project-Setup"><a href="#Project-Setup" class="headerlink" title="Project Setup"></a>Project Setup</h2><p>First, you’ll need to install OCaml on your machine if you don’t have it already. <code>brew install ocaml</code> on macos, <code>apt-get install ocaml</code> on debian/ubuntu, with instructions for more platforms <a href="http://opam.ocaml.org/doc/Install.html" target="_blank" rel="external">here</a>.</p>
<p>Then we’ll install <a href="https://github.com/jaredly/ohai" target="_blank" rel="external">ohai</a>, the tool I made for configuring a new native reason project. You can think of it as the <code>npm init</code> or <code>cargo new</code> for Reason/OCaml.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opam pin add ohai git+https://github.com/jaredly/ohai<span class="comment">#1.0.1</span></div></pre></td></tr></table></figure>
<p>Finally, let’s setup the project!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ohai init --bin my_cli</div></pre></td></tr></table></figure>
<p>You’ll see that a bunch of files have been created for you - go ahead and take a look in each to see what’s there.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">~$ tree</div><div class="line">.</div><div class="line">├── Makefile</div><div class="line">├── bin</div><div class="line">│   ├── jbuild</div><div class="line">│   └── my_cli.re</div><div class="line">├── jbuild-workspace.dev</div><div class="line">├── lib</div><div class="line">│   ├── Main.re</div><div class="line">│   └── jbuild</div><div class="line">├── <span class="built_in">test</span></div><div class="line">│   ├── jbuild</div><div class="line">│   └── test.re</div><div class="line">└── my_cli.opam</div></pre></td></tr></table></figure>
<p>So we’ve got 3 directories - <code>lib</code> is where our functionality lives, <code>bin</code> just has a single top-level call into <code>lib/Main.re</code>, and <code>test</code> will have any tests we write.</p>
<h2 id="Building-amp-Running"><a href="#Building-amp-Running" class="headerlink" title="Building &amp; Running"></a>Building &amp; Running</h2><p>If you run <code>make run</code> it will build your project and run the built executable.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">~$ make run</div><div class="line">jbuilder build @install</div><div class="line">       refmt bin/my_cli.re.ml</div><div class="line">    ocamldep bin/my_cli.depends.ocamldep-output</div><div class="line">      ocamlc lib/lib.&#123;cmi,cmo,cmt&#125;</div><div class="line">       refmt lib/Main.re.ml</div><div class="line">    ocamldep lib/lib.depends.ocamldep-output</div><div class="line">      ocamlc lib/lib__Main.&#123;cmi,cmo,cmt&#125;</div><div class="line">      ocamlc bin/my_cli.&#123;cmi,cmo,cmt&#125;</div><div class="line">    ocamlopt lib/lib.&#123;cmx,o&#125;</div><div class="line">    ocamlopt lib/lib__Main.&#123;cmx,o&#125;</div><div class="line">    ocamlopt lib/lib.&#123;a,cmxa&#125;</div><div class="line">    ocamlopt bin/my_cli.&#123;cmx,o&#125;</div><div class="line">    ocamlopt bin/my_cli.exe</div><div class="line">jbuilder <span class="built_in">exec</span> my_cli</div><div class="line">Hello world</div></pre></td></tr></table></figure>
<p>As you can see, the makefile first ran <code>jbuilder build @install</code>, which means “build everything you know about”, and then <code>jbuilder exec my_cli</code>. The latter is shorthand for <code>./_build/default/bin/my_cli.exe</code>.</p>
<h2 id="Parsing-CLI-Arguments"><a href="#Parsing-CLI-Arguments" class="headerlink" title="Parsing CLI Arguments"></a>Parsing CLI Arguments</h2><blockquote>
<p>If you haven’t already, look through the <a href="https://facebook.github.io/reason/" target="_blank" rel="external">docs for Reason</a> for a primer on the syntax. The documentation for the <a href="https://caml.inria.fr/pub/docs/manual-ocaml/libref/index.html" target="_blank" rel="external">OCaml standard library</a> can also be useful.</p>
</blockquote>
<h3 id="Echoing-Sys-argv"><a href="#Echoing-Sys-argv" class="headerlink" title="Echoing Sys.argv"></a>Echoing Sys.argv</h3><p>The default <code>Main.re</code> is very simple, and doesn’t do anything with arguments.</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> run () =&gt; &#123;</div><div class="line">  print_endline <span class="string">"Hello world"</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> add2 x =&gt; x + <span class="number">2</span>;</div></pre></td></tr></table></figure>
<p>To start out let’s just print out all received arguments:</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> run() =&gt; &#123;</div><div class="line">  print_endline (<span class="built_in">String</span>.concat <span class="string">", "</span> (Array.to_list Sys.argv));</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>Docs for <code>Sys.argv</code> are <a href="">here</a></p>
</blockquote>
<p>Now, we rebuild with <code>make</code>, and this time we’ll run the executable with some extra arguments:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~$ jbuilder <span class="built_in">exec</span> my_cli -- -an-argument another argument</div><div class="line">my_cli, -an-argument, another, argument</div></pre></td></tr></table></figure>
<p><a href="https://caml.inria.fr/pub/docs/manual-ocaml/libref/Sys.html" target="_blank" rel="external"><code>Sys.argv</code></a> is an <code>array</code> (fixed-length, mutable) of strings, starting with the name of the program. We wanted to display them, and the simplest way was to convert it to a list so that we could <code>String.concat</code> them all together into a single string.</p>
<h3 id="Reacting-to-arguments"><a href="#Reacting-to-arguments" class="headerlink" title="Reacting to arguments"></a>Reacting to arguments</h3><p>Let’s do something more intersting in response to arguments. If you run <code>my_cli beep</code> we’ll respond with “boop”, and if you type <code>my_cli cowsay</code> followed by any text we’ll mimic that beloved utility.</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> run() =&gt; &#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Let's convert the args to a list again, as lists</div><div class="line">   * are generally nicer to work with in Reason,</div><div class="line">   * especially when we want to "do something with the</div><div class="line">   * first one, and then deal with the rest".</div><div class="line">   * Arrays are better if we want mutation or random access.</div><div class="line">   */</div><div class="line">  <span class="keyword">let</span> arglist = Array.to_list Sys.argv;</div><div class="line">  switch arglist &#123;</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * This initial "_" is a placeholder, meaning</div><div class="line">       * "we don't care what's first in the list".</div><div class="line">       * Sys.argv's first item is the name of the</div><div class="line">       * executable, which we don't care about.</div><div class="line">       */</div><div class="line">      | [_, <span class="string">"beep"</span>] =&gt; print_endline <span class="string">"boop"</span></div><div class="line">      | [_, <span class="string">"cowsay"</span>, ...rest] =&gt; cowsay (<span class="built_in">String</span>.concat <span class="string">" "</span> rest)</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * This is the catchall case - any unrecognized</div><div class="line">       * invocation will be met with our help text.</div><div class="line">       */</div><div class="line">      | _ =&gt; print_endline help_text;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>Now what does cowsay look like? We’ll do a simplified version that puts everything on one line.</p>
<figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* A multiline string! */</span></div><div class="line"><span class="keyword">let</span> cow = &#123;|</div><div class="line">        \   ^__^</div><div class="line">         \  (oo)\_______</div><div class="line">            (__)\       )\/\</div><div class="line">                ||----w |</div><div class="line">                ||     ||</div><div class="line">|&#125;;</div><div class="line"><span class="keyword">let</span> cowsay text =&gt; &#123;</div><div class="line">  <span class="comment">// `^` is the way to join strings together</span></div><div class="line">  <span class="keyword">let</span> message = <span class="string">" ( "</span> ^ text ^ <span class="string">" )"</span> ^ cow;</div><div class="line">  <span class="comment">// We could also do</span></div><div class="line">  <span class="comment">// Printf.printf " ( %s ) %s" text cow;</span></div><div class="line">  print_endline message;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>In OCaml, unlike rust, javascript, golang, java, etc., all declarations must go before usage, even at the top level. This means that we’ll put <code>help_text</code> and <code>cowsay()</code> <em>above</em> our <code>run()</code> function in the final code.</p>
</blockquote>
<p>Come up with some helpful text, and we’re all set!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> help_text = &#123;|my_cli - a cli <span class="keyword">for</span> all your needs!</div><div class="line"></div><div class="line">Usage:</div><div class="line"> - my_cli beep</div><div class="line"> - my_cli cowsay some text here</div><div class="line">|&#125;;</div><div class="line"></div><div class="line"><span class="built_in">let</span> cow = &#123;|</div><div class="line">        \   ^__^</div><div class="line">         \  (oo)\_______</div><div class="line">            (__)\       )\/\</div><div class="line">                ||----w |</div><div class="line">                ||     ||</div><div class="line">|&#125;;</div><div class="line"><span class="built_in">let</span> cowsay text =&gt; &#123;</div><div class="line">  <span class="built_in">let</span> message = <span class="string">" ( "</span> ^ text ^ <span class="string">" )"</span> ^ cow;</div><div class="line">  print_endline message;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">let</span> run() =&gt; &#123;</div><div class="line">  <span class="built_in">let</span> arglist = Array.to_list Sys.argv;</div><div class="line">  switch arglist &#123;</div><div class="line">      | [_, <span class="string">"beep"</span>] =&gt; print_endline <span class="string">"boop"</span></div><div class="line">      | [_, <span class="string">"cowsay"</span>, ...rest] =&gt; cowsay (String.concat <span class="string">" "</span> rest)</div><div class="line">      | _ =&gt; print_endline help_text;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="We’re-done"><a href="#We’re-done" class="headerlink" title="We’re done!"></a>We’re done!</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">~$ make</div><div class="line">...</div><div class="line">~$ ./_build/default/bin/my_cli.exe</div><div class="line">my_cli - a cli <span class="keyword">for</span> all your needs!</div><div class="line"></div><div class="line">Usage:</div><div class="line"> - my_cli beep</div><div class="line"> - my_cli cowsay some text here</div><div class="line"></div><div class="line">~$ ./_build/default/bin/my_cli.exe beep</div><div class="line">boop</div><div class="line">~$ ./_build/default/bin/my_cli.exe cowsay reason is awesome</div><div class="line"> ( reason is awesome )</div><div class="line">        \   ^__^</div><div class="line">         \  (oo)\_______</div><div class="line">            (__)\       )\/\</div><div class="line">                ||----w |</div><div class="line">                ||     ||</div></pre></td></tr></table></figure>
<h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><p>The <a href="https://github.com/jaredly/ohai" target="_blank" rel="external">source code</a> for <code>ohai</code> is pretty well documented, if you’re interested in looking at something a little more complicated.</p>
<p>I’m also planning on writing a tutorial on making a simple web server with <a href="https://github.com/mirage/ocaml-cohttp" target="_blank" rel="external">cohttp</a> pretty soon.</p>
<p>Join us in our <a href="https://discord.gg/reasonml" target="_blank" rel="external">Discord channel</a>, and catch me <a href="twitter.com/jaredforsyth">on twitter</a> with your comments!</p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2017/06/17/your-first-native-reason-ocaml-project/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[JavaScript Interop with Reason and BuckleScript]]></title>
      <link>https://jaredforsyth.com/2017/06/03/javascript-interop-with-reason-and-bucklescript/</link>
      <guid>https://jaredforsyth.com/2017/06/03/javascript-interop-with-reason-and-bucklescript/</guid>
      <pubDate>Sun, 04 Jun 2017 04:00:35 GMT</pubDate>
      <description>
      <![CDATA[How to communicate safely and unsafely with the host language.]]>
      
      </description>
      <content:encoded><![CDATA[<p>So you’re all ready to write some Reason but you need to call a JavaScript function? Or maybe you can’t figure out how to write something in OCaml-land and wish you could just bail for a minute &amp; write it in JavaScript? Fortunately, both of those are fairly easy to pull off.</p>
<a id="more"></a>
<p>If you don’t already have Reason + BuckleScript set up on your machine, head over to the <a href="http://jaredforsyth.com/2017/06/03/getting-started-with-reason-and-bucklescript/">“Getting Started” blog post</a> or clone <a href="https://github.com/jaredly/reason-bucklescript-example" target="_blank" rel="external">this github repository</a> for a minimal boilerplate. If you want a primer on Reason syntax, the <a href="http://facebook.github.io/reason/" target="_blank" rel="external">Reason documentation</a> provides a nice comparison to JavaScript.</p>
<blockquote>
<p>I’ll be using Reason syntax instead of standard OCaml syntax because I like it much better :) but all of the stuff here applies to vanilla OCaml + Bucklescript as well, and the syntax is quite similar. The latest version of Bucklescript as of this writing is 1.7.4, so if yours is later than that, some details might be different. In all of this, you can consult the excellent <a href="http://bucklescript.github.io/bucklescript/Manual.html" target="_blank" rel="external">Bucklescript documentation</a>.</p>
</blockquote>
<h2 id="Just-dumping-JavaScript-in-the-middle-of-your-Reason-code"><a href="#Just-dumping-JavaScript-in-the-middle-of-your-Reason-code" class="headerlink" title="Just dumping JavaScript in the middle of your Reason code"></a>Just dumping JavaScript in the middle of your Reason code</h2><p>If you’re just hacking things together, this can be very nice, but you also have all of the unsafety of JavaScript code 😄.</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="type">Js</span>.log <span class="string">"this is reason"</span>;</div><div class="line">[%%bs.raw &#123;|</div><div class="line">console.log(<span class="symbol">'here</span> is some javascript <span class="keyword">for</span> you');</div><div class="line">|&#125;];</div></pre></td></tr></table></figure>
<blockquote>
<p><code>{|</code> and <code>|}</code> are the delimeters of a multi-line string in OCaml. You can also put a tag in there e.g. <code>{something|</code> and then it will look for a matching <code>|something}</code> to close.</p>
</blockquote>
<p>And here’s the resulting javascript:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"this is reason"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'here is some javascript for you'</span>);</div></pre></td></tr></table></figure>
<h2 id="Dumping-in-some-JavaScript-and-making-it-accessible-from-Reason"><a href="#Dumping-in-some-JavaScript-and-making-it-accessible-from-Reason" class="headerlink" title="Dumping in some JavaScript, and making it accessible from Reason"></a>Dumping in some JavaScript, and making it accessible from Reason</h2><p>What if you want a value that can be used from your Reason code?</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="type">Js</span>.log <span class="string">"this is reason"</span>;</div><div class="line"><span class="keyword">let</span> x = [%bs.raw &#123;| <span class="symbol">'here</span> is a <span class="built_in">string</span> from javascript' |&#125;];</div><div class="line"><span class="type">Js</span>.log (x ^ <span class="string">" back in reason land"</span>); /* ^ is the operator <span class="keyword">for</span> <span class="built_in">string</span> concat */</div></pre></td></tr></table></figure>
<p>Now you might be wondering “what magic is this?? How did ocaml know that <code>x</code> was a string? <strong>It doesn’t</strong>. The type of <code>x</code> in this code is a magic type that will unify with anything! This is quite dangerous and can have cascading effects in OCaml’s type inference algorithm.</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> y = [%bs.raw &#123;| <span class="symbol">'something'</span> |&#125;];</div><div class="line"><span class="type">Js</span>.log (<span class="string">"a string"</span> ^ y, <span class="number">10</span> + y);</div><div class="line">/* danger!! ocaml won't stop you from using y <span class="keyword">as</span> <span class="number">2</span> totally different types */</div></pre></td></tr></table></figure>
<p>To fix this, you should <strong>always</strong> provide a concrete type for the result of <code>bs.raw</code>.</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x: <span class="built_in">string</span> = [%bs.raw &#123;| <span class="symbol">'well</span>-typed' |&#125;];</div><div class="line"><span class="type">Js</span>.log (x ^ <span class="string">" back in reason land"</span>);</div><div class="line">/* ocaml will error out <span class="keyword">if</span> you <span class="keyword">try</span> <span class="keyword">to</span> use x <span class="keyword">as</span> anything other than a <span class="built_in">string</span> */</div></pre></td></tr></table></figure>
<p>And here’s the output!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE</span></div><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"this is reason"</span>);</div><div class="line"><span class="keyword">var</span> x = ( <span class="string">'here is a string from javascript'</span> );</div><div class="line"><span class="built_in">console</span>.log(x + <span class="string">" back in reason land"</span>);</div><div class="line"><span class="keyword">var</span> y = ( <span class="string">'something'</span> );</div><div class="line"><span class="built_in">console</span>.log(<span class="comment">/* tuple */</span>[</div><div class="line">      <span class="string">"a string"</span> + y,</div><div class="line">      <span class="number">10</span> + y | <span class="number">0</span></div><div class="line">    ]);</div><div class="line"><span class="keyword">var</span> x$<span class="number">1</span> = ( <span class="string">'well-typed'</span> );</div><div class="line"><span class="built_in">console</span>.log(x$<span class="number">1</span> + <span class="string">" back in reason land"</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>The difference between the 2 <code>%%</code> from the previous section and the 1 <code>%</code> here is important! <code>[%%something ...]</code> is an OCaml “extension point” that represents a <em>top-level</em> statement (it can’t show up inside a function or value, for example). <code>[%something ...]</code> is an extension point that stands in for an <em>expression</em>, and can be put just about anywhere – but make sure that the JavaScript you put inside is actually an expression! E.g. don’t put a semicolon after it, or you’ll get a syntax error when you try to run the resulting JavaScript.</p>
</blockquote>
<h2 id="Dumping-in-a-function-amp-passing-values"><a href="#Dumping-in-a-function-amp-passing-values" class="headerlink" title="Dumping in a function &amp; passing values"></a>Dumping in a function &amp; passing values</h2><p>We’ll need a little knowledge about Bucklescript’s runtime representation of various values for this to work.</p>
<ul>
<li><code>strings</code> are strings, <code>ints</code> and <code>floats</code> are just numbers</li>
<li>an <a href="http://facebook.github.io/reason/#built-in-data-types-array" target="_blank" rel="external">Array</a> is a mutable fixed-length list in OCaml, and is represented as a plain javascript array.</li>
<li>a <a href="http://facebook.github.io/reason/#built-in-data-types-linked-list" target="_blank" rel="external">List</a> is an immutable functional-style linked list, and is definitely the more idiomatic one to use in most cases. However, it’s representation is more complicated (try <code>Js.log [1,2,3,4]</code> to check it out). Because of this, I generally convert to &amp; from <code>Array</code>s when I’m talking to javascript, via <code>Array.of_list</code> and <code>Array.to_list</code>.</li>
<li>If you want to go deeper, there’s an exhaustive list <a href="https://github.com/bucklescript/bucklescript/wiki/Runtime-representation" target="_blank" rel="external">on the BuckleScript wiki</a></li>
</ul>
<p>Knowing that, we can write a function in JavaScript that just accepts an array and returns a number, without much trouble at all.</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> jsCalculate: <span class="built_in">array</span> <span class="built_in">int</span> =&gt; <span class="built_in">int</span> =&gt; <span class="built_in">int</span> = [%bs.raw &#123;|</div><div class="line"> <span class="keyword">function</span> (numbers, scaleFactor) &#123;</div><div class="line">   var result = <span class="number">0</span>;</div><div class="line">   numbers.forEach(number =&gt; &#123;</div><div class="line">     result += number;</div><div class="line">   &#125;);</div><div class="line">   return result * scaleFactor;</div><div class="line"> &#125;</div><div class="line">|&#125;];</div><div class="line"><span class="keyword">let</span> calculate numbers scaleFactor =&gt;</div><div class="line">  jsCalculate (<span class="type">Array</span>.of_list numbers) scaleFactor;</div><div class="line"><span class="type">Js</span>.log (calculate [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="number">10</span>); /* -&gt; <span class="number">60</span> */</div></pre></td></tr></table></figure>
<p>Of course, this function that I wrote in JavaScript could be ported over to Reason without much hassle.</p>
<p><strong>Remember</strong> that this is an escape hatch that’s very useful for learning so you can jump in quickly and make something, but it’s a good exercise to go back through and convert things back into nice type safe reason code.</p>
<p>I’ve run into more than a few bugs because of raw JavaScript that I added to save time 😅.</p>
<h2 id="Settling-down-and-getting-disciplined-about-things"><a href="#Settling-down-and-getting-disciplined-about-things" class="headerlink" title="Settling down and getting disciplined about things"></a>Settling down and getting disciplined about things</h2><p>So far we’ve been using <code>bs.raw</code>, which is a very fast n loose way to do it, and <strong>not</strong> suitable for production.</p>
<p>But what if we actually need to call a function that’s in JavaScript? It’s needed for interacting with the DOM, or using node modules. In BuckleScript, you use an <code>external</code> declaration (<a href="http://bucklescript.github.io/bucklescript/Manual.html#_binding_to_simple_js_functions_values" target="_blank" rel="external">docs</a>).</p>
<p>Getting a value and getting a function are both pretty easy:</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">external</span> pi: <span class="built_in">float</span> = <span class="string">"Math.PI"</span> [@@bs.<span class="keyword">val</span>];</div><div class="line"><span class="keyword">let</span> tau = pi *. <span class="number">2.0</span>;</div><div class="line"><span class="keyword">external</span> alert: <span class="built_in">string</span> =&gt; void = <span class="string">"alert"</span> [@@bs.<span class="keyword">val</span>];</div><div class="line">alert <span class="string">"hello"</span>;</div></pre></td></tr></table></figure>
<p>But what about when we want something more complicated? Here’s how we could call <code>getContext</code> on a Canvas DOM node:</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> canvas;</div><div class="line"><span class="keyword">type</span> context;</div><div class="line">/* we're leaving these types abstract, because we won't</div><div class="line"> * be using them directly anywhere */</div><div class="line"><span class="keyword">external</span> getContext: canvas =&gt; <span class="built_in">string</span> =&gt; context = <span class="string">""</span> [@@bs.send];</div><div class="line"><span class="keyword">let</span> myCanvas: canvas = [%bs.raw &#123;| document.getElementById(<span class="string">"mycanvas"</span>) |&#125;];</div><div class="line"><span class="keyword">let</span> ctx = getContext myCanvas <span class="string">"2d"</span>;</div></pre></td></tr></table></figure>
<p>So let’s unpack what’s going on. We created some abstract types for the Canvas DOM node and the associated RenderingContext object.</p>
<p>Then we made a <code>getContext</code> function, but instead of <code>@@bs.val</code> we used <code>@@bs.send</code>, and we used an empty string for the text of the external. <code>@@bs.send</code> means “we’re calling a method on the first argument”, which in this case is the canvas. BuckleScript will translate this into <code>theFirstArgument.getContext(theSecondArgument, ...)</code>.</p>
<p>And the empty string means “the js-name is the same as the name we’re giving the external here in BuckleScript-land”, in this case <code>getContext</code>. If we wanted to name it something else (like <code>getRenderingContext</code>), when we’d have to supply the string <code>&quot;getContext&quot;</code> so that BuckleScript calls the right function.</p>
<p>Let’s add one more function just so it’s interesting.</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">external</span> fillRect: context =&gt; <span class="built_in">float</span> =&gt; <span class="built_in">float</span> =&gt; <span class="built_in">float</span> =&gt; <span class="built_in">float</span> =&gt; <span class="built_in">unit</span> = <span class="string">""</span> [@@bs.send];</div></pre></td></tr></table></figure>
<p>And now we can draw something!</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fillRect ctx <span class="number">0.0</span> <span class="number">0.0</span> <span class="number">100.0</span> <span class="number">100.0</span>;</div></pre></td></tr></table></figure>
<p>It’s not much, but adding other canvas methods is similar, and then you can start doing some <a href="https://twitter.com/jaredforsyth/status/871062358076030976" target="_blank" rel="external">really fun things</a>.</p>
<p>So what does the compiled JavaScript look like?</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> tau = <span class="built_in">Math</span>.PI * <span class="number">2.0</span>;</div><div class="line">alert(<span class="string">"hello"</span>);</div><div class="line"><span class="keyword">var</span> myCanvas = ( <span class="built_in">document</span>.getElementById(<span class="string">"mycanvas"</span>) );</div><div class="line"><span class="keyword">var</span> ctx = myCanvas.getContext(<span class="string">"2d"</span>);</div><div class="line">ctx.fillRect(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">100.0</span>, <span class="number">100.0</span>);</div></pre></td></tr></table></figure>
<p>Wow! Notice how BuckleScript just inlined our <code>pi</code> variable for us? And the output looks almost exactly like it was written by hand.</p>
<h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><p>Join us in our <a href="https://discord.gg/reasonml" target="_blank" rel="external">Discord channel!</a></p>
<p>Check out the <a href="https://github.com/chenglou/reason-react-example" target="_blank" rel="external">reason-react-example</a> repository if you want to make some UIs.</p>
<p>Here are some repositories that make use of externals:</p>
<ul>
<li><a href="https://github.com/jaredly/reason-maze" target="_blank" rel="external">https://github.com/jaredly/reason-maze</a></li>
<li><a href="https://github.com/jaredly/rsnpaint" target="_blank" rel="external">https://github.com/jaredly/rsnpaint</a></li>
<li><a href="https://github.com/chenglou/MariOCaml" target="_blank" rel="external">https://github.com/chenglou/MariOCaml</a> (OCaml, not Reason syntax)</li>
</ul>
<p>If you’re starting into Reason, keep track of the things that confuse you and let us know! There’s lots of documentation work to do, and it will be best if it’s informed by people who are just starting out.</p>
]]></content:encoded>
      <comments>https://jaredforsyth.com/2017/06/03/javascript-interop-with-reason-and-bucklescript/#disqus_comments</comments>
    </item>
    
  </channel>
</rss>
